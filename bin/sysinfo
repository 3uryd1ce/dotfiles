#!/usr/bin/env sh
# system statistics in a format suitable for lemonbar

. ${HOME}/.cache/wal/colors.sh
DELIMITER="  %{F${color3}}|%{F${foreground}}  "
DEFAULT_BGFG="%{B${background}} %{F${foreground}"
export DELIMITER DEFAULT_BGFG

show_date () {
  DATE=$(date "+%Y-%m-%d %H:%M")
  printf %s "${DATE}"
}

show_volume () {
  # division is used to truncate the resulting floating-point number
  VOLUME=$(printf "$(sndioctl -n output.level) / 0.01\\n" | bc)
  if [ "$(sndioctl -n output.mute)" = 1 ]; then
    printf %s "MUTE"
  else
    printf %s "vol: ${VOLUME}%"
  fi
}

show_disk_space () {
  DISKSPACE=$(df -h /home | tail -1 | awk '{print $4}')
  printf %s "/home: ${DISKSPACE}"
}

show_battery () {
  ADAPTER=$(apm -a)
  MINUTES=$(($(apm -m) % 60))
  HOURS=$(($(apm -m) / 60))
  REMAINING="~${HOURS}h & ${MINUTES}m"
  PERCENTAGE="$(apm -l)%"
  if [ "${ADAPTER}" = 0 ]; then
    printf %s "bat: ${REMAINING}, at ${PERCENTAGE}"
  elif [ "${ADAPTER}" = 1 ]; then
    printf %s "chr: at ${PERCENTAGE}"
  elif [ "${ADAPTER}" = 2 ]; then
    printf %s "bkup: at ${PERCENTAGE}"
  elif [ "${ADAPTER}" = 255 ]; then
    printf %s "unknown bat"
  fi
}

show_track () {
  SONG=$(mpc current)
  TIME=$(mpc | sed -n 2p | awk '{print $3}')
  if [ -z "${SONG}" ]; then
    printf %s ""
  else
    printf %s "${SONG}${DELIMITER}${TIME}"
  fi
}

show_temp () {
  TEMPERATURE=$(sysctl -n hw.sensors.cpu0.temp0 | awk -F "." '{print $1}')
  printf %s "temp: ${TEMPERATURE} Â°C"
}

show_cpu_freq () {
  # conversely, we want the floating-point number here
  CPU_FREQ=$(printf "$(sysctl -n hw.cpuspeed) * 0.001\\n" | bc )
  printf %s "cpu: ${CPU_FREQ} GHz"
}

while true; do
# indenting here affects spacing in the bar
STATS="${DEFAULT_BGFG} %{l}$(show_battery)${DELIMITER}$(show_temp)\
%{c}$(show_track) %{r}$(show_volume)${DELIMITER}$(show_disk_space)${DELIMITER}\
$(show_date)"
  printf %s "${STATS}"
  sleep 1
done
