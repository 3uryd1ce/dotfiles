#!/usr/bin/env sh
# Copyright (c) 2020 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
set -e

compressor="/usr/local/bin/bzip2"
compressor_args="-c"
compressor_basename=$(/usr/bin/basename ${compressor})
extension=".dump.bz2"
today=$(/bin/date '+%Y-%m-%d')

lecture="This script creates level 0 dumps of /root, /var, /home,
/usr/local, /usr/X11R6, and /usr. It compresses them using
${compressor_basename} and places the backups inside /mnt in a folder
named ${today}. It then automatically unmounts /mnt and powers off.

Is this acceptable (y/n)?"

sec_print() {
  /usr/bin/printf "%s\\n" "$@"
}

err() {
  sec_print "[$(/bin/date +'%Y-%m-%d|%H:%M:%S')]: $*" >&2
  exit 1
}

must_be_root() {
  if [ "$(/usr/bin/id -u)" != 0 ]; then
    err "Execute $(/usr/bin/basename "$0") with root privileges."
  fi
}

bkup() {
  /sbin/dump -0auf - / \
    | "${compressor}" ${compressor_args} \
    > /mnt/"${today}"/root"${extension}" &

  /sbin/dump -0auf - /var \
    | "${compressor}" ${compressor_args} \
    > /mnt/"${today}"/var"${extension}" &

  /sbin/dump -0auf - /home \
    | "${compressor}" ${compressor_args} \
    > /mnt/"${today}"/home"${extension}" &

  /sbin/dump -0auf - /usr/local \
    | "${compressor}" ${compressor_args} \
    > /mnt/"${today}"/usr-local"${extension}" &

  /sbin/dump -0auf - /usr/x11R6 \
    | "${compressor}" ${compressor_args} \
    > /mnt/"${today}"/usr-x11R6"${extension}" &

  /sbin/dump -0auf - /usr \
    | "${compressor}" ${compressor_args} \
    > /mnt/"${today}"/usr"${extension}" &
  wait
}

prompt() {
  banner "bkup"
  printf %s "${lecture} "
  read -r continue
  while [ "${continue}" != "y" ] && [ "${continue}" != "n" ]; do
    sec_print "Only 'y' and 'n' are recognized inputs."
    printf %s "Is this acceptable? (y/n) "
    read -r continue
  done
}

main() {
  must_be_root
  prompt
  case "${continue}" in
    n)
      sec_print "Goodbye."
      exit 0
      ;;
    y)
      /bin/mkdir -p "/mnt/${today}" || err "Unable to create backup directory."
      sec_print "Dumping filesystems..."
      bkup || err "Backup failed."
      /sbin/umount /mnt || err "Unable to unmount drive"
      /sbin/shutdown -p now
      ;;
  esac
}

main
