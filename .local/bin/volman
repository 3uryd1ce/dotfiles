#!/usr/bin/env sh
# shellcheck disable=SC1090
set -e
# Copyright (c) 2020-2021 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# check that the library file is readable. if it is, source it so its
# functions are available. if not, exit due to potentially unpredictable
# behavior.
readonly library="${HOME}/.local/bin/common.sh"
if [ -r "${library}" ]; then
  . "${library}"
else
  cat >&2 <<EOF
${library} doesn't exist or isn't readable.
${0##*/} may not function correctly without it; exiting for safety.
EOF
  exit 1
fi

# check prerequisites (Xorg instance + dependencies).
prereqs() {
  check_grafix
  check_deps <<'EOF'
bc
dunstify
sndioctl
EOF
}

# either increase, decrease, or mute the volume if the appropriate
# argument is given. if not, error and display usage details.
adjust_vol() {
  case "$1" in
    'inc')  sndioctl output.level=+0.05 >/dev/null 2>&1 ;;
    'dec')  sndioctl output.level=-0.05 >/dev/null 2>&1 ;;
    'mute') sndioctl output.mute=!      >/dev/null 2>&1 ;;
    *)      err "${usage_details}"                      ;;
  esac
}

# based on the current output level, print an appropriate volume-related icon.
choose_icon() {
  icon_dir='/usr/local/share/icons/gnome/scalable'

  # if icon_dir isn't readable, don't choose an icon.
  if ! [ -r "${icon_dir}" ]; then
    unset icon_dir && return
  else
    readonly icon_dir
  fi

  # handle the edge cases first.
  if [ "${vol}" = 100 ]; then
    echo "${icon_dir}/status/audio-volume-high-symbolic.svg" && return
  elif [ "${vol}" = 0 ] || [ "${MUTED}" = 'true' ]; then
    echo "${icon_dir}/status/audio-volume-muted-symbolic.svg" && return
  fi

  if [ "${vol}" -ge 50 ]; then
    echo "${icon_dir}/status/audio-volume-high-symbolic.svg"
  elif [ "${vol}" -ge 25 ]; then
    echo "${icon_dir}/status/audio-volume-medium-symbolic.svg"
  else
    echo "${icon_dir}/status/audio-volume-low-symbolic.svg"
  fi
}

# if muted, display 'MUTED.'
# otherwise, display volume.
#
# ${MUTED} is set in main(), as multiple functions need the value.
notify() {
  if [ "${MUTED}" = 'true' ]; then
    dunstify_with_flags "MUTED"
  else
    readonly vol="$(get_vol)"
    dunstify_with_flags "${vol}%"
  fi
}

# if muted, succeed.
# if not muted, fail.
muted() {
  case "$(sndioctl -n output.mute 2>/dev/null)" in
    1) return 0 ;;
    0) return 1 ;;
  esac
}

# get raw output level and convert it to something more parsable.
get_vol() {
  raw_vol="$(sndioctl -n output.level 2>/dev/null)"
  case "${raw_vol}" in
    1.000) echo 100                                                  ;;
    0.000) echo 0                                                    ;;
    *)     printf 'scale=0; (%.2g * %s) / 1\n' "${raw_vol}" 100 | bc ;;
  esac
}

# dunstify but with extra bells and whistles, used in notify().
#
# if choose_icon returns the path of an icon, include it with the
# notification.
dunstify_with_flags() {
  # arbitrary ID to get rid of duplicate notifications.
  readonly msg_id="25231"
  vol_icon="$(choose_icon)"
  if [ -n "${vol_icon}" ]; then
    readonly vol_icon
    dunstify -i "${vol_icon}" -u low -r "${msg_id}" "$@"
  else
    unset vol_icon
    dunstify -u low -r "${msg_id}" "$@"
  fi
}

# check prerequisites. perform the specified action with vol()
# (inc|dec|mute), then display the appropriate notification if
# successful.
main() {
  prereqs
  readonly arguments_needed=1
  readonly usage_details="${0##*/} needs ${arguments_needed} argument(s).

usage:
${0##*/} [inc|dec|mute]"
  adjust_vol "$1"
  muted && MUTED='true'
  notify
}

main "$1"
