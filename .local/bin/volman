#!/bin/sh
# shellcheck disable=SC1090
# Copyright (c) 2020-2022 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


err() {
	printf '%s\n' "$*" >&2
	exit 1
}


usage() {
	err "usage:
${0##*/} [inc|dec|mute]"
}


check_deps() {
	while read -r dependency; do

		[ -x "$(command -v -- "${dependency}")" ] \
			|| err "${dependency} not found in PATH or not executable."

	done
}


# either increase, decrease, or mute the volume if the appropriate
# argument is given. if not, error and display usage details.
adjust_vol() {
	case "$1" in
		'inc') check_mute || sndioctl output.level=+0.05 >/dev/null 2>&1 ;;
		'dec') check_mute || sndioctl output.level=-0.05 >/dev/null 2>&1 ;;
		'mute') sndioctl output.mute=! >/dev/null 2>&1 ;;
		*) usage ;;
	esac
}


print_vol() {
	if [ "${MUTED}" = 'true' ]; then
		echo 'MUTED'

	else
		echo "$@"

	fi
}


# if muted, succeed.
# if not muted, fail.
check_mute() {
	case "$(sndioctl -n output.mute 2>/dev/null)" in
		1) return 0 ;;
		0) return 1 ;;
		*) err 'Failed to check output.mute with sndioctl(1).' ;;
	esac
}


# get raw output level and convert it to something more parsable.
get_vol() {
	RAW_VOL="$(sndioctl -n output.level 2>/dev/null)"
	readonly RAW_VOL

	case "${RAW_VOL}" in
		1.000) echo 100 ;;
		0.000) echo 0 ;;
		# division is here to truncate the floating point number.
		*) printf 'scale=0; (%.2g * %s) / 1\n' "${RAW_VOL}" 100 | bc ;;
	esac
}


[ -z "${DISPLAY}" ] && err "${0##*/} requires a graphical environment."

check_deps <<-'EOF'
	bc
	dunstify
	sndioctl
EOF

adjust_vol "$1"

VOL="$(get_vol)"
readonly VOL

check_mute && readonly MUTED='true'

readonly MSG_ID="25231"

dunstify -u low -r "${MSG_ID}" -- "$(print_vol "${VOL}%")"
