#!/usr/bin/env sh
# shellcheck disable=SC1090
set -e
# Copyright (c) 2020-2021 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# check that the library file is readable. if it is, source it so its
# functions are available. if not, exit due to potentially unpredictable
# behavior.
readonly library="${HOME}/.local/bin/common.sh"
if [ -r "${library}" ]; then
  . "${library}"
else
  cat >&2 <<EOF
${library} doesn't exist or isn't readable.
${0##*/} may not function correctly without it; exiting for safety.
EOF
  exit 1
fi

# check prerequisites (Xorg instance + dependencies).
prereqs() {
  check_grafix
  check_deps <<'EOF'
dunstify
sndioctl
EOF
}

# either increase, decrease, or mute the volume if the appropriate
# argument is given. if not, error and display usage details.
vol() {
  case "$1" in
    'inc')  sndioctl output.level=+0.05 >/dev/null 2>&1 ;;
    'dec')  sndioctl output.level=-0.05 >/dev/null 2>&1 ;;
    'mute') sndioctl output.mute=!      >/dev/null 2>&1 ;;
    *)      err "${usage_details}"                      ;;
  esac
}

# based on the current output level, choose an appropriate volume-related icon.
choose_icon() {
  icon_dir='/usr/local/share/icons/gnome/scalable'

  # if icon_dir isn't readable, don't choose an icon.
  if ! [ -r "${icon_dir}" ]; then
    unset icon_dir && return 1
  else
    readonly icon_dir
  fi

  # handle the edge cases first.
  if [ "${formatted_vol}" = 100 ]; then
    readonly vol_icon="${icon_dir}/status/audio-volume-high-symbolic.svg"
  elif [ "${formatted_vol}" = 0 ] || [ "${muted}" = 1 ]; then
    readonly vol_icon="${icon_dir}/status/audio-volume-muted-symbolic.svg"
  fi

  # if vol_icon has already been assigned, we can exit the function.
  if [ -n "${vol_icon}" ]; then
    return
  elif [ "${formatted_vol}" -ge 50 ]; then
    readonly vol_icon="${icon_dir}/status/audio-volume-high-symbolic.svg"
  elif [ "${formatted_vol}" -ge 25 ]; then
    readonly vol_icon="${icon_dir}/status/audio-volume-medium-symbolic.svg"
  else
    readonly vol_icon="${icon_dir}/status/audio-volume-low-symbolic.svg"
  fi
}

# query volume, format it appropriately, and then display a notification
# based on whether `sndioctl -n output.mute` returns 0 (not muted) or 1 (muted).
notify() {
  readonly raw_vol="$(sndioctl -n output.level 2>/dev/null)"
  case "${raw_vol}" in
    1.000) readonly formatted_vol=100                                 ;;
    0.000) readonly formatted_vol=0                                   ;;
    *)     readonly formatted_vol="$(printf '%.2s' "${raw_vol##*.}")" ;;
  esac

  readonly muted="$(sndioctl -n output.mute 2>/dev/null)"
  choose_icon

  if [ "${muted}" = 1 ]; then
    dunstify_with_flags "MUTED"
  else
    dunstify_with_flags "${formatted_vol}%"
  fi
}

# here to handle the presence or absence of vol_icon, mainly.
dunstify_with_flags() {
  # arbitrary ID to get rid of duplicate notifications.
  readonly msg_id="25231"
  if [ -n "${vol_icon}" ]; then
    dunstify -i "${vol_icon}" -u low -r "${msg_id}" "$@"
  else
    dunstify -u low -r "${msg_id}" "$@"
  fi
}

# check prerequisites. perform the specified action with vol()
# (inc|dec|mute), then display the appropriate notification if
# successful.
main() {
  prereqs
  readonly arguments_needed=1
  readonly usage_details="${0##*/} needs ${arguments_needed} argument(s).

usage:
${0##*/} [inc|dec|mute]"
 vol "$1" && notify
}

main "$1"
