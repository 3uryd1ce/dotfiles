#!/bin/sh
# Copyright (c) 2020-2022 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# TODO
# figure out how to set a refresh timer appropriate for each function,
# rather than a global refresh timer

set -ehu

err() {
	printf '%s\n' "$*" >&2
	exit 1
}

warn() {
	printf '%s\n' "$*" >&2
}

get_battery_life() {
	# Measured in minutes.
	estimated_battery_life="$(apm -m)"

	[ -n "${estimated_battery_life}" ] || {
		warn 'Battery life estimation was empty.'
		return 1
	}

	case "${estimated_battery_life}" in
		*[!0-9]*)
			warn 'Battery life must be an integer.'
			return 1
			;;
	esac


	minutes=$((estimated_battery_life % 60))
	hours=$((estimated_battery_life / 60))
	remaining="~${hours}h & ${minutes}m"

	echo "bat: ${remaining}, at ${percentage}%"
}

show_battery_life() {
	case "${BATTERY_STATUS}" in
		4|255)
			warn 'Battery status: absent/unknown.'
			return 1
			;;
	esac

	adapter_status="$(apm -a)"
	percentage="$(apm -l)"

	case "${adapter_status}" in
		# A/C disconnected.
		0) get_battery_life ;;

		# A/C connected (charging).
		1) echo "chr: at ${percentage}%" ;;

		# No battery information to display.
		*) warn 'No battery information.'; return 1 ;;
	esac
}


show_temperature() {
	temperature="$(sysctl -n hw.sensors.cpu0.temp0)"
	echo "temp: ${temperature%%.*} Â°C"
}

show_current_track() {
	# If mpd isn't running, return.
	pgrep -q 'mpd' || return 1

	# If mpd is paused, return.
	mpc | grep -Fq 'paused' && return 1

	# Otherwise, display the current track.
	mpc current
}

show_disk_space() {
	diskspace="$(df -h '/home' | awk '/^\/dev/{print $4}')"
	echo "/home: ${diskspace}"
}

sysinfo() {
	echo "$(show_battery_life) +< $(show_temperature) \
+|C +@fn=1; $(show_current_track) +|R +@fn=0; $(show_disk_space)"
}


[ "$(uname)" = 'OpenBSD' ] || err "${PROGRAM_NAME} only supports OpenBSD."
command -v 'mpc' >/dev/null 2>&1 || err 'mpc not found in PATH.'


BATTERY_STATUS="$(apm -b)"
readonly BATTERY_STATUS

HOSTNAME="$(hostname -s)"
readonly HOSTNAME


while true; do
	sysinfo
	sleep 30
done
