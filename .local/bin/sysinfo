#!/usr/bin/env sh
# shellcheck disable=SC2154,SC1090
set -eh
# Copyright (c) 2020-2021 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# TODO
# figure out how to set a refresh timer appropriate for each function,
# rather than a global refresh timer

# check that the library file is readable. if it is, source it so its
# functions are available. if not, exit due to potentially unpredictable
# behavior.
readonly library="${HOME}/.local/bin/common.sh"
if [ -r "${library}" ]; then
  . "${library}"
else
  cat >&2 <<EOF
${library} doesn't exist or isn't readable.
${0##*/} may not function correctly without it; exiting for safety.
EOF
  exit 1
fi

show_battery() {
  if [ "${batt_status}" = 4 ] || [ "${batt_status}" = 255 ]; then
    return 1
  fi
  adapter_status="$(apm -a)"
  percentage="$(apm -l)"
  case "${adapter_status}" in
    0) # disconnected (on battery)
      estimated_battery_life="$(apm -m)"
      echo "${estimated_battery_life}" \
        | grep -q '[^[:digit:]]' \
        && err "${estimated_battery_life} must only contain digits."
      ebl_minutes=$((estimated_battery_life % 60))
      ebl_hours=$((estimated_battery_life / 60))
      remaining="~${ebl_hours}h & ${ebl_minutes}m"
      echo "bat: ${remaining}, at ${percentage}%"
      ;;
    1) # charging
      echo "chr: at ${percentage}%"
      ;;
    *) # there's no battery information to display
      return 1
      ;;
  esac
}

show_temp() {
  case "$(hostname -s)" in
    'lain')      temperature="$(sysctl -n hw.sensors.cpu0.temp0)"  ;;
    'aphrodite') temperature="$(sysctl -n hw.sensors.ksmn0.temp0)" ;;
    *)           return 1                                          ;;
  esac
  if [ "${batt_status}" = 4 ] || [ "${batt_status}" = 255 ]; then
    echo "temp: ${temperature%%.*} °C"
  else
    echo "${delimiter}temp: ${temperature%%.*} °C"
  fi
}

show_track() {
  if ! pgrep -q 'mpd'; then
    return 1
  elif mpc | grep -qi 'paused'; then
    return 1
  else
    mpc current
  fi
}

show_volume() {
  raw_volume="$(sndioctl -n output.level 2>/dev/null)"
  case "${raw_volume}" in
    1.000) formatted_volume=100                                    ;;
    0.000) formatted_volume=0                                      ;;
    *)     formatted_volume="$(printf '%.2s' "${raw_volume##*.}")" ;;
  esac
  muted="$(sndioctl -n output.mute 2>/dev/null)"
  [ "${muted}" = 0 ] \
    && echo "vol: ${formatted_volume}%${delimiter}" \
    || echo "MUTE${delimiter}"
}

show_disk_space() {
  diskspace="$(df -h /home | awk '/dev/{print $4}')"
  echo "/home: ${diskspace}${delimiter}"
}

show_date() {
  date '+%a %m-%d %H:%M'
}

sysinfo() {
# spaces bork ${stats}
stats="${bgfg} %{l}$(show_battery)$(show_temp)\
%{c}$(show_track) %{r}$(show_volume)$(show_disk_space)\
$(show_date)"
  echo "${stats}"
}

prereqs() {
  check_deps <<'EOF'
apm
mpc
sndioctl
EOF
  import_colors
}

main() {
  prereqs
  batt_status="$(apm -b)"
  delimiter="  %{F${color3:=#9974E7}}|%{F${foreground:=#e0cef3}}  "
  bgfg="%{B${background:=#040516}} %{F${foreground:=#e0cef3}"
  while :; do
    sysinfo
    sleep 5
  done
}

main
