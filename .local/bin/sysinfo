#!/usr/bin/env sh
# shellcheck disable=SC2154,SC1090
# Copyright (c) 2020-2021 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
set -e
. "${HOME}/.local/bin/common.sh"

# system statistics in a format suitable for lemonbar

# TODO
# figure out how to set a refresh timer appropriate for each function,
# rather than a global refresh timer

show_date() {
  date "+%a %m-%d %H:%M"
}

show_volume() {
  raw_volume="$(sndioctl -n output.level 2>/dev/null)"
  formatted_volume="$(printf "%.2s" "${raw_volume##*.}")"
  muted="$(sndioctl -n output.mute 2>/dev/null)"
  [ "${muted}" = 0 ] \
    && printf "%s" "vol: ${formatted_volume}%${delimiter}" \
    || printf "%s" "MUTE${delimiter}"
}

show_disk_space() {
  diskspace="$(df -h /home | awk '/dev/{print $4}')"
  printf "%s" "/home: ${diskspace}${delimiter}"
}

show_battery() {
  adapter_status="$(apm -a)"
  estimated_battery_life="$(apm -m)"
  ebl_minutes=$((estimated_battery_life % 60))
  ebl_hours=$((estimated_battery_life / 60))
  remaining="~${ebl_hours}h & ${ebl_minutes}m"
  percentage="$(apm -l)"
  case "${adapter_status}" in
    0)
      printf "%s" "bat: ${remaining}, at ${percentage}%"
      ;;
    1)
      printf "%s" "chr: at ${percentage}%"
      ;;
    2)
      printf "%s" "bkup: ${remaining}, at ${percentage}%"
      ;;
    *)
      return 1
      ;;
  esac
}

show_track() {
  song="$(mpc current)"
  printf "%s" "${song:-}"
}

show_temp() {
  case "$(hostname -s)" in
    lain)
      temperature="$(sysctl -n hw.sensors.cpu0.temp0)"
      ;;
    aphrodite)
      temperature="$(sysctl -n hw.sensors.ksmn0.temp0)"
      ;;
    *)
      return 1
      ;;
  esac
  printf "%s" "${delimiter}temp: ${temperature%%.*} Â°C"
}

# TODO: change so that sysinfo() will only print track if MPD is currently
# playing music
sysinfo() {
  pgrep -q mpd
  case "$?" in
    0)
# spaces bork ${stats}
stats="${bgfg} %{l}$(show_battery)$(show_temp)\
%{c}$(show_track) %{r}$(show_volume)$(show_disk_space)\
$(show_date)"
      printf "%s" "${stats}"
      ;;
    1)
stats="${bgfg} %{l}$(show_battery)$(show_temp)\
%{r}$(show_volume)$(show_disk_space)\
$(show_date)"
      printf "%s" "${stats}"
      ;;
  esac
}

main() {
  import_colors || err "Unable to import colors."
  delimiter="  %{F${color3}}|%{F${foreground}}  "
  bgfg="%{B${background}} %{F${foreground}"
  while true; do
    # without this catchall err, sysinfo outputs nothing if an MPD
    # process isn't available
    sysinfo || err "sysinfo() failed."
    sleep 5
  done
}

main
