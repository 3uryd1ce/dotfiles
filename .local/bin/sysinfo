#!/usr/bin/env sh
# shellcheck disable=SC2154,SC1090
# Copyright (c) 2020-2021 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# TODO
# figure out how to set a refresh timer appropriate for each function,
# rather than a global refresh timer

set -eh

readonly LIBRARY="${HOME}/.local/bin/common.sh"

if [ -r "${LIBRARY}" ]; then
  . "${LIBRARY}"

else
  cat >&2 <<EOF
${LIBRARY} doesn't exist or isn't readable.
${0##*/} may not function correctly without it; exiting for safety.
EOF

  exit 1

fi


show_battery() {
  case "${batt_status}" in
    4|255) return 1 ;;
  esac

  adapter_status="$(apm -a)"
  percentage="$(apm -l)"

  case "${adapter_status}" in

    0) # disconnected (on battery)
      estimated_battery_life="$(apm -m)"

      case "${estimated_battery_life}" in
        ''|*[!0-9]*) err 'show_battery() only accepts integers.' ;;
        *)           # integers are OK, so continue              ;;
      esac

      ebl_minutes=$((estimated_battery_life % 60))
      ebl_hours=$((estimated_battery_life / 60))
      remaining="~${ebl_hours}h & ${ebl_minutes}m"

      echo "bat: ${remaining}, at ${percentage}%"

      ;;

    1) # charging
      echo "chr: at ${percentage}%"

      ;;

    *) # there's no battery information to display
      return 1

      ;;

  esac
}


show_temp() {
  case "$(hostname -s)" in
    'lain')      temperature="$(sysctl -n hw.sensors.cpu0.temp0)"     ;;
    'aphrodite') temperature="$(sysctl -n hw.sensors.ksmn0.temp0)"    ;;
    *)           return 1 # if temp sensor is unknown, return nothing ;;
  esac

  case "${batt_status}" in
    4|255) echo "temp: ${temperature%%.*} °C"             ;;
    *)     echo "${delimiter}temp: ${temperature%%.*} °C" ;;
  esac
}


show_track() {
  if ! pgrep -q 'mpd'; then
    return 1

  elif mpc | grep -qi 'paused'; then
    return 1

  else
    mpc current

  fi
}


show_disk_space() {
  diskspace="$(df -h '/home' | awk -- '/^\/dev/{print $4}')"
  echo "/home: ${diskspace}${delimiter}"
}


show_date() {
  date '+%a %m-%d %H:%M'
}


sysinfo() {
  # spaces at the beginning of a new line bork ${stats}
  stats="${bgfg} %{l}$(show_battery)$(show_temp)\
%{c}$(show_track) %{r}$(show_disk_space)\
$(show_date)"

  echo "${stats}"
}


prereqs() {
  check_deps <<'EOF'
apm
mpc
sndioctl
EOF

  import_colors_sh
}


prereqs

batt_status="$(apm -b)"
delimiter="  %{F${color3:=#9974E7}}|%{F${foreground:=#e0cef3}}  "
bgfg="%{B${background:=#040516}} %{F${foreground:=#e0cef3}"

while true; do
  sysinfo
  sleep 30
done
