#!/usr/bin/env sh
# Copyright (c) 2020 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
set -e
# system statistics in a format suitable for lemonbar

. "${HOME}/.cache/wal/colors.sh"
export delimiter="  %{F${color3}}|%{F${foreground}}  "
export bgfg="%{B${background}} %{F${foreground}"

sec_print() {
  printf "%s\\n" "$@"
}

err() {
  sec_print "[$(date +'%Y-%m-%d|%H:%M:%S')]: $*" >&2
  exit 1
}

show_date() {
  date=$(date "+%a %m-%d %H:%M")
  sec_print "${date}"
}

show_volume() {
  raw_volume=$(sndioctl -n output.level)
  # division is used to truncate the resulting floating-point number
  formatted_volume=$(sec_print "${raw_volume} / 0.01" | bc)
  if [ "$(sndioctl -n output.mute)" = 1 ]; then
    sec_print "MUTE${delimiter}"
  else
    sec_print "vol: ${formatted_volume}%${delimiter}"
  fi
}

show_disk_space() {
  diskspace=$(df -h /home | tail -1 | awk '{print $4}')
  sec_print "/home: ${diskspace}${delimiter}"
}

show_battery() {
  adapter=$(apm -a)
  minutes=$(($(apm -m) % 60))
  hours=$(($(apm -m) / 60))
  remaining="~${hours}h & ${minutes}m"
  percentage="$(apm -l)%"
  if [ "${adapter}" = 0 ]; then
    sec_print "bat: ${remaining}, at ${percentage}${delimiter}"
  elif [ "${adapter}" = 1 ]; then
    sec_print "chr: at ${percentage}${delimiter}"
  elif [ "${adapter}" = 2 ]; then
    sec_print "bkup: ${remaining}, at ${percentage}${delimiter}"
  elif [ "${adapter}" = 255 ]; then
    sec_print ""
  fi
}

show_track() {
  song=$(mpc current)
  time=$(mpc | sed -n 2p | awk '{print $3}')
  if [ -z "${song}" ]; then
    sec_print ""
  else
    sec_print "${song}${delimiter}${time}"
  fi
}

show_temp() {
  if [ "$(hostname -s)" = "lain" ]; then
    temperature=$(sysctl -n hw.sensors.cpu0.temp0 | awk -F "." '{print $1}')
  elif [ "$(hostname -s)" = "aphrodite" ]; then
    temperature=$(sysctl -n hw.sensors.ksmn0.temp0 | awk -F "." '{print $1}')
  else
    temperature=''
  fi
  if [ -z "${temperature}" ]; then
    sec_print ""
  else
    sec_print "temp: ${temperature} Â°C"
  fi
}

show_cpu_freq() {
  raw_cpu_freq=$(sysctl -n hw.cpuspeed)
  formatted_cpu_freq=$(sec_print "${raw_cpu_freq} * 0.001" | bc)
  sec_print "cpu: ${formatted_cpu_freq} GHz"
}

sysinfo() {
  while true; do
  # indenting here affects spacing in the bar
stats="${bgfg} %{l}$(show_battery)$(show_temp)\
%{c}$(show_track) %{r}$(show_volume)$(show_disk_space)\
$(show_date)"
    sec_print "${stats}"
    sleep 1
  done
}

sysinfo || err "Something went wrong with sysinfo."
