#!/bin/sh
# https://rgz.ee/bin/ssg6
# Copyright 2018-2019 Roman Zolotarev <hi@romanzolotarev.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -e

main() {
	[ -n "$1" ] || usage
	[ -n "$2" ] || usage
	[ -n "$3" ] || usage
	[ -n "$4" ] || usage

	set -u

	[ -d "$1" ] || no_dir "$1"
	[ -d "$2" ] || no_dir "$2"

	SRC="$(readlink_f "$1")"
	readonly SRC

	DST="$(readlink_f "$2")"
	readonly DST

	IGNORE="$(
		if [ ! -f "${SRC}/.ssgignore" ]; then
			printf ' ! -path "*/.*"'
			return
		fi

		while read -r x; do
			[ -n "${x}" ] || continue
			printf ' ! -path "*/%s*"' "${x}"
		done < "${SRC}/.ssgignore"
	)"
	readonly IGNORE

	# files

	title="$3"

	readonly H_FILE="${SRC}/_header.html"
	readonly F_FILE="${SRC}/_footer.html"
	if [ -f "${F_FILE}" ]; then
		FOOTER="$(cat -- "${F_FILE}")" && readonly FOOTER && export FOOTER
	fi

	if [ -f "${H_FILE}" ]; then
		HEADER="$(cat -- "${H_FILE}")" && readonly HEADER && export HEADER
	fi

	list_dirs "${SRC}" | (cd "${SRC}" && cpio -pdu -- "${DST}")

	fs="$(
		if [ -f "${DST}/.files" ]; then
			list_affected_files "${SRC}" "${DST}/.files"
		else
			list_files "$1"
		fi
	)"

	if [ -n "${fs}" ]; then
		echo "${fs}" | tee -- "${DST}/.files"
		if echo "${fs}" | grep -q '\.md$'; then
			if command -v 'lowdown' > /dev/null 2>&1; then
				echo "${fs}" \
					| grep '\.md$' \
					| render_md_files_lowdown "${SRC}" "${DST}" "${title}"
			elif command -v 'Markdown.pl' > /dev/null 2>&1; then
				echo "${fs}" \
					| grep '\.md$' \
					| render_md_files_Markdown_pl "${SRC}" "${DST}" "${title}"
			else
				echo "couldn't find lowdown nor Markdown.pl"
				exit 3
			fi
		fi
		echo "${fs}" \
			| grep '\.html$' \
			| render_html_files "${SRC}" "${DST}" "${title}"

		echo "${fs}" \
			| grep -Ev '\.md$|\.html$' \
			| (cd "${SRC}" && cpio -pu -- "${DST}")
	fi

	printf '[ssg] ' >&2
	print_status 'file, ' 'files, ' "${fs}" >&2

	# sitemap

	base_url="$4"
	date="$(date '+%F')"
	urls="$(list_pages "${SRC}")"

	[ -n "${urls}" ] \
		&& render_sitemap "${urls}" "${base_url}" "${date}" > "${DST}/sitemap.xml"

	print_status 'url' 'urls' "${urls}" >&2
	echo >&2
}

readlink_f() {
	file="$1"
	cd "${file%/*}"
	file="${file##*/}"

	while [ -L "${file}" ]; do
		file="$(readlink -- "${file}")"
		cd "${file%/*}"
		file="${file##*/}"
	done

	dir="$(pwd -P)"
	echo "${dir}/${file}"
}

print_status() {
	[ -z "$3" ] && printf 'no %s' "$2" && return

	echo "$3" | awk -v singular="$1" -v plural="$2" -- '
	END {
		if (NR==1) printf NR " " singular
		if (NR>1) printf NR " " plural
	}'
}

usage() {
	echo "usage: ${0##*/} src dst title base_url" >&2
	exit 1
}

no_dir() {
	echo "${0##*/}: $1: No such directory" >&2
	exit 2
}

list_dirs() {
	cd "$1" && eval "find . -type d ! -name '.' ! -path '*/_*' ${IGNORE}"
}

list_files() {
	cd "$1" && eval "find . -type f ! -name '.' ! -path '*/_*' ${IGNORE}"
}

list_dependent_files() {
	e="\\( -name '*.html' -o -name '*.md' -o -name '*.css' -o -name '*.js' \\)"
	cd "$1" && eval "find . -type f ! -name '.' ! -path '*/_*' ${IGNORE} ${e}"
}

list_newer_files() {
	cd "$1" && eval "find . -type f ! -name '.' ${IGNORE} -newer $2"
}

has_partials() {
	grep -qE '^./_.*\.html$|^./_.*\.js$|^./_.*\.css$'
}

list_affected_files() {
	fs="$(list_newer_files "$1" "$2")"

	if echo "${fs}" | has_partials; then
		list_dependent_files "$1"
	else
		echo "${fs}"
	fi
}

render_html_files() {
	while read -r f; do
		render_html_file "$3" < "$1/${f}" > "$2/${f}"
	done
}

render_md_files_lowdown() {
	while read -r f; do
		lowdown \
			--html-no-escapehtml \
			--html-no-skiphtml \
			--parse-no-metadata \
			--parse-no-autolink \
			-- "$1/${f}" \
			| render_html_file "$3" \
				> "$2/${f%\.md}.html"
	done
}

render_md_files_Markdown_pl() {
	while read -r f; do
		Markdown.pl -- "$1/${f}" \
			| render_html_file "$3" \
				> "$2/${f%\.md}.html"
	done
}

render_html_file() {
	# h/t Devin Teske
	awk -v title="$1" -- '
	{ body = body "\n" $0 }
	END {
		body = substr(body, 2)
		if (body ~ /<\/?[Hh][Tt][Mm][Ll]/) {
			print body
			exit
		}
		if (match(body, /<[[:space:]]*[Hh]1(>|[[:space:]][^>]*>)/)) {
			t = substr(body, RSTART + RLENGTH)
			sub("<[[:space:]]*/[[:space:]]*[Hh]1.*", "", t)
			gsub(/^[[:space:]]*|[[:space:]]$/, "", t)
			if (t) title = t " &mdash; " title
		}
		n = split(ENVIRON["HEADER"], header, /\n/)
		for (i = 1; i <= n; i++) {
			if (match(tolower(header[i]), "<title></title>")) {
				head = substr(header[i], 1, RSTART - 1)
				tail = substr(header[i], RSTART + RLENGTH)
				print head "<title>" title "</title>" tail
			} else print header[i]
		}
		print body
		print ENVIRON["FOOTER"]
	}'
}

list_pages() {
	e="\\( -name '*.html' -o -name '*.md' \\)"
	cd "$1" \
		&& eval "find . -type f ! -path '*/.*' ! -path '*/_*' ${IGNORE} ${e}" \
		| sed 's#^./##;s#.md$#.html#;s#/index.html$#/#'
}

render_sitemap() {
	urls="$1"
	base_url="$2"
	date="$3"

	echo '<?xml version="1.0" encoding="UTF-8"?>
<urlset
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9
http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd"
xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">'
	echo "${urls}" | sed -E -- 's#^(.*)$#<url><loc>'"${base_url}"'/\1</loc><lastmod>'"\
${date}"'</lastmod><priority>1.0</priority></url>#'
	echo '</urlset>'
}

main "$@"
