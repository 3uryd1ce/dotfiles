#!/usr/bin/env perl
# Copyright (c) 2022-2023 Ashlen <dev@anthes.is>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use v5.36;
use autodie qw(:all);

# Core modules.
use File::Basename qw(fileparse);
use File::Path qw(remove_tree);
use File::Spec::Functions qw(catfile);
use File::Temp qw(tempdir);
use Getopt::Std;
use IPC::Open2;

# External modules.
use IPC::System::Simple qw(systemx);

BEGIN {
	if ( $^O eq 'openbsd' ) {
		require Anthesis::OpenBSD::Pledge;
		require Anthesis::OpenBSD::Unveil;
		Anthesis::OpenBSD::Pledge->import(qw(pledge_or_die));
		Anthesis::OpenBSD::Unveil->import(qw(unveil_or_die));
	}
}

pledge_or_die(qw(rpath wpath cpath fattr tmppath proc exec unveil))
	if $^O eq 'openbsd';

my $program_name = fileparse $0;

sub usage {
	die <<EOF;
usage:
$program_name [-i indexfile] [domain] [markdown directory] [server directory]

-i: Specify the name of an alternate index file (by default, it is
    set to index.md). It must be present in the provided markdown
    directory, otherwise $program_name will fail.
EOF
}

our ( $opt_h, $opt_i );
getopts 'hi:';

usage if $opt_h;
my $index_file = $opt_i // 'index.md';

my $domain_without_schema = shift or usage;
my $markdown_dir = shift or usage;
my $server_dir = shift or usage;

my ( $username, $home ) = ( getpwuid $> )[ 0, 7 ];
my $html_dir = tempdir( CLEANUP => 1, );

my $xdg_bin_home = $ENV{'XDG_BIN_HOME'} // catfile $home, qw(.local bin);

# For safety, check if XDG_BIN_HOME starts with $home.
$xdg_bin_home =~ /\A$home/ or die "XDG_BIN_HOME does not start with $home!\n";

my $ssg = catfile $xdg_bin_home, qw(ssg6);
my $rssg = catfile $xdg_bin_home, qw(rssg);

if ( $^O eq 'openbsd' ) {
	my %unveil_perms = (
		'/tmp' => 'r',
		'/usr/libdata/perl5' => 'r',   # modules
		$ssg => 'x',   # static site generator
		$rssg => 'x',   # rss feed
		'/bin/mv' => 'x',   # to move lots of tiny files
		$markdown_dir => 'r',   # markdown to turn into html
		$html_dir => 'rc',   # place where html initially goes
		$server_dir => 'rwc',   # place where html eventually goes
	);

	while ( my ( $path, $permissions ) = each %unveil_perms ) {
		unveil_or_die( $path => $permissions );
	}

	# Drop fattr and unveil.
	pledge_or_die(qw(rpath wpath cpath tmppath proc exec));
}

chdir $html_dir;

my $ssg_pid =
	open2( my $ssg_out, undef, $ssg, $markdown_dir, $html_dir,
		$username, $domain_without_schema );

waitpid $ssg_pid, 0;
close $ssg_out;

remove_tree( $server_dir, { keep_root => 1, } );
systemx qw(mv --), glob('*'), $server_dir;

my $rssg_pid = open2(
	my $rssg_out, undef, $rssg,
	catfile( $markdown_dir, $index_file ),
	"Newsletter - $domain_without_schema"
);
open my $rss_feed_fh, '>', catfile( $server_dir, 'rss.xml' );
while (<$rssg_out>) { print $rss_feed_fh $_; }

waitpid $rssg_pid, 0;

# Does the order in which filehandles are closed matter here?
close $rssg_out;
close $rss_feed_fh;
