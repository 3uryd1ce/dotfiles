#!/usr/bin/env perl
# Copyright (c) 2022 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use v5.32;
use autodie qw(:all);
use strict;
use warnings;

# Core modules.
use File::Basename qw(fileparse);
use File::Path qw(remove_tree);
use File::Spec::Functions qw(catfile);
use File::Temp qw(tempdir);
use Getopt::Std;
use IPC::Open2;

# External modules.
use IPC::System::Simple;

our ( $opt_h, $opt_i );
my $program_name = fileparse $0;

sub usage {
	die <<EOF;
usage:
$program_name [-i indexfile] [domain] [markdown directory] [server directory]

-i: Specify the name of an alternate index file (by default, it is
    set to index.md). It must be present in the provided markdown
    directory, otherwise $program_name will fail.
EOF
}

getopts 'hi:';

my $domain_without_schema = shift or usage;
my $markdown_dir = shift or usage;
my $server_dir = shift or usage;

my $index_file = $opt_i // 'index.md';
my $html_dir = tempdir( CLEANUP => 1, );
chdir $html_dir;

my $ssg_pid =
	open2( my $ssg_out, undef, 'ssg6', $markdown_dir, $html_dir,
		( getpwuid $> )[0],
		$domain_without_schema );

waitpid $ssg_pid, 0;
close $ssg_out;

remove_tree( $server_dir, { keep_root => 1, } );
system qw(mv --), glob('*'), $server_dir;

my $rssg_pid = open2(
	my $rssg_out, undef, 'rssg',
	catfile( $markdown_dir, $index_file ),
	"Newsletter - $domain_without_schema"
);
open my $rss_feed_fh, '>', catfile( $server_dir, 'rss.xml' );
while (<$rssg_out>) { print $rss_feed_fh $_; }

waitpid $rssg_pid, 0;

# Does the order in which filehandles are closed matter here?
close $rssg_out;
close $rss_feed_fh;
