#!/bin/sh
# Copyright (c) 2020-2022 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -e

err() {
	printf '%s\n' "$*" >&2
	exit 1
}

usage() {
	cat >&2 <<EOF
usage:
${0##*/} [cue file] [FLAC file]

-c : convert 24bit flac to 16bit before splitting (sox needed)
-d : delete the original FLAC file.
EOF
	exit 1
}

# converts a 24-bit FLAC file to a 16-bit FLAC file with sox(1).
#
# $1 is a FLAC file to be converted.
convert_to_16bit() {
	STAGING_FILE="${1%.flac}-staging.flac"
	readonly STAGING_FILE

	# http://sox.sourceforge.net/Docs/FAQ
	#
	# According to sox(1), most noise shaping filters are only available
	# at 44.1kHz, so that is the chosen sample rate.
	if sox -SG "$1" -b 16 "${STAGING_FILE}" rate -v 44100 dither -s; then

		if [ "${DELETE}" = 'yes' ]; then
			rm -- "$1"
		else
			mv -- "$1" "$1-24bit.bak"
		fi

		mv -- "${STAGING_FILE}" "$1"
	else
		err 'Failed to convert 24-bit FLAC file to 16-bit.'
	fi
}

splitflac() {
	[ -e "$2.bak" ] && err "$2.bak exists, exiting to prevent clobbering."

	# Spaces in shnsplit filename messes up cue tagging, so just leave
	# the default in place. It's the only way to be sure that we won't
	# run into that issue (%t often contains spaces).
	shnsplit -f "$1" -o flac -- "$2" || err 'Unable to split the FLAC file.'

	if [ "${DELETE}" = 'yes' ]; then
		rm -- "$2"
	else
		mv -- "$2" "$2.bak"
	fi

	"${CUETAG}" "$1" ./*.flac || err 'Unable to tag FLAC files.'
}


while getopts cd opt; do
	case "${opt}" in
		c) readonly CONVERT='yes' ;;
		d) readonly DELETE='yes' ;;
		*) usage ;;
	esac
done
shift $((OPTIND - 1))

[ -n "$1" ] || usage
[ -n "$2" ] || usage


# cuetag is checked later since the executable's name isn't consistent
# among operating systems.
readonly DEPENDENCIES='flac
shntool'

echo "${DEPENDENCIES}" | while read -r dependency; do
	command -v -- "${dependency}" >/dev/null 2>&1 ||
		err "${dependency} not found in PATH."
done


if command -v 'cuetag' >/dev/null 2>&1; then
	readonly CUETAG='cuetag'
elif command -v 'cuetag.sh' >/dev/null 2>&1; then
	readonly CUETAG='cuetag.sh'
else
	err 'Neither cuetag nor cuetag.sh found.'
fi


[ "${CONVERT}" = 'yes' ] && {
	# makes sense to check dependency only when it's really needed
	command -v 'sox' >/dev/null 2>&1 || err 'sox not found in PATH.'
	convert_to_16bit "$2"
}


# Check for sector boundary errors and fix them if they are present
# before splitting the FLAC file.
shnfix -c -- "$2" && {
	shnfix -o flac -- "$2"
	mv -- "${2%.flac}-fixed.flac" "$2"
}


CRLESS_CUESHEET="$(mktemp)"
readonly CRLESS_CUESHEET

# removes carriage returns from cuesheet
tr -d '\r' < "$1" > "${CRLESS_CUESHEET}"
mv "${CRLESS_CUESHEET}" "$1"


splitflac "$1" "$2"
