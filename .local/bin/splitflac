#!/usr/bin/env sh
# shellcheck disable=SC1090
set -e
# Copyright (c) 2020-2021 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# check that the library file is readable. if it is, source it so its
# functions are available. if not, exit due to potentially unpredictable
# behavior.
readonly library="${HOME}/.local/bin/common.sh"

if [ -r "${library}" ]; then
  . "${library}"

else
  cat >&2 <<EOF
${library} doesn't exist or isn't readable.
${0##*/} may not function correctly without it; exiting for safety.
EOF

  exit 1

fi

usage() {
  cat >&2 <<EOF
${0##*/} requires ${args_needed} argument(s).

usage:
${0##*/} [cue file] [FLAC file]

-c : convert 24bit flac to 16bit before splitting (sox needed)
-d : delete the original FLAC file.
EOF

  exit 1
}

# determines which executable name to use for cuetag.
assign_cuetag() {
  if [ -x "$(command -v 'cuetag')" ]; then
    readonly cuetag='cuetag'

  elif [ -x "$(command -v 'cuetag.sh')" ]; then
    readonly cuetag='cuetag.sh'

  else
    err 'Neither cuetag nor cuetag.sh found.'

  fi
}

# converts a 24-bit FLAC file to a 16-bit FLAC file with sox(1).
#
# $1 is a FLAC file to be converted.
conv16() {
  staging_file="${1%.flac}-staging.flac"

  # http://sox.sourceforge.net/Docs/FAQ
  #
  # according to sox(1), most noise shaping filters are only available
  # at 44.1kHz, so that is the chosen sample rate.
  if sox "$1" -SGb 16 "${staging_file}" rate -v 44100 dither -s; then
    mv -- "${staging_file}" "$1"

  else
    err 'Failed to convert 24-bit FLAC file to 16-bit.'

  fi
}

splitflac() {
  [ -e "$2.bak" ] && err "$2.bak exists, exiting to prevent clobbering."

  # spaces in shnsplit filename messes up cue tagging, so just leave
  # the default in place. it's the only way to be sure that we won't run
  # into that issue, because %t will often add spaces too.
  if ! cuebreakpoints -- "$1" | shnsplit -o flac -- "$2"; then
    err 'Unable to split the FLAC file.'
  fi

  mv -- "$2" "$2.bak"

  "${cuetag}" "$1" ./*.flac || err 'Unable to tag FLAC files.'

  [ "${DELETE}" = 'yes' ] && rm -- "$2.bak"
}

# cuetag is checked in assign_cuetag() rather than check_deps() since
# the executable's name isn't consistent among operating systems.
check_deps <<'EOF'
cuebreakpoints
flac
shnfix
shnsplit
EOF

readonly args_needed=2

while getopts cd opt; do

  case "${opt}" in
    c) readonly CONVERT='yes' ;;
    d) readonly DELETE='yes'  ;;
    *) usage                  ;;
  esac

done

shift $((OPTIND - 1))

[ "$#" = "${args_needed}" ] || usage

assign_cuetag

# TODO: this should back up the original 24-bit FLAC file. maybe
# splitflac() can pick up on it and not back it up if ${CONVERT} =
# yes.
if [ "${CONVERT}" = 'yes' ]; then
  # makes sense to check dependency only when it's really needed
  echo 'sox' | check_deps
  conv16 "$2"
fi

# checks for sector boundary errors and fixes them if they are present
# before splitting the FLAC file.
if shnfix -c -- "$2"; then
  shnfix -o flac -- "$2"
  mv -- "${2%.flac}-fixed.flac" "$2"
fi

crless_cuesheet="$(mktemp)"

# removes carriage returns from cuesheet
tr -d '\r' <"$1" >"${crless_cuesheet}"
mv "${crless_cuesheet}" "$1"

unset crless_cuesheet

splitflac "$1" "$2"
