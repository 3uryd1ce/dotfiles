#!/usr/bin/env sh
# shellcheck disable=SC1090
# Copyright (c) 2020-2021 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -e


err() {
  printf '%s\n' "$*" >&2
  exit 1
}


check_deps() {
  while read -r dependency; do

    if [ -x "$(command -v -- "${dependency}")" ]; then
      continue

    else
      err "${dependency} not found in PATH or not executable."

    fi

  done
}


import_colors_sh() {
  readonly COLORS_SH="${XDG_CACHE_HOME:=${HOME}/.cache}/wal/colors.sh"

  if ! [ -r "${COLORS_SH}" ]; then
    echo "${COLORS_SH} is not readable." >&2

  elif ! [ -f "${COLORS_SH}" ]; then
    echo "${COLORS_SH} is not a file." >&2

  # passed sanity checks, so source the file
  else
    . "${COLORS_SH}"

  fi
}


menu() {
  dmenu -i -fn 'mono-12'       \
  -nb "${background:=#040516}" \
  -nf "${color3:=#9974e7}"     \
  -sb "${background:=#040516}" \
  -sf "${foreground:=#e0cef3}" \
  "$@"
}


# if no arg is passed and STDIN is empty, exit with an error.
check_opts() {
  if [ -n "$1" ]; then
    readonly URL="$1"

  elif [ ! -t 0 ]; then
    read -r URL && readonly URL

  else
    err "${0##*/} needs a URL!"

  fi
}


# given a URL and a choice, perform the associated action.
#
# output is squelched for most options since I primarily use this with
# newsboat.
linkhandler() {
  case "$(menu -l "${NUM_OF_OPTS}" -p 'What to do with this URL?')" in

    'copy duration')
      DURATION="$(yt-dlp --get-duration -- "${URL}" 2>/dev/null)"
      readonly DURATION

      if [ -n "${DURATION}" ]; then
        printf '%s' "${DURATION}" | xclip -selection clipboard
        notify-send -- "Copied video duration (${DURATION})."

      else
        err 'Empty input, so no duration was yanked.'

      fi

      ;;

    'copy title')
      TITLE="$(yt-dlp -e -- "${URL}" 2>/dev/null)"
      readonly TITLE

      if [ -n "${TITLE}" ]; then
        printf '%s' "${TITLE}" | xclip -selection clipboard
        notify-send -- "${TITLE} yanked."

      else
        err 'Empty input, so no title yanked.'

      fi

      ;;

    'download audio')
      tmux new-window "yt-dlp -xf bestaudio/best -- ${URL}; read"

      ;;

    'download file')
      tmux new-window "(cd ${HOME}/Downloads && ftp -nU '' -- ${URL}); read"

      ;;

    'download video')
      tmux new-window "yt-dlp -- ${URL}; read"

      ;;

    'listen')
      tmux new-window "mpva -- ${URL}"

      ;;

    'print duration')
      DURATION="$(yt-dlp --get-duration -- "${URL}" 2>/dev/null)"

      if [ -n "${DURATION}" ]; then
        notify-send -- "${DURATION}"

      else
        err 'Empty input, so no duration printed.'

      fi

      ;;

    'read')
      tmux new-window "ftp -no - -U '' -- ${URL} | zathura -- -"

      ;;

    'view image')
      viewimg "${URL}"

      ;;

    'watch')
      tmux new-window "mpv -- ${URL}"

      ;;

    'watch (loop)')
      tmux new-window "mpv --loop -- ${URL}"

      ;;

    *)
      err "${0##*/} doesn't support that option."

      ;;

  esac
}


[ -z "${DISPLAY}" ] && err "${0##*/} requires a graphical environment."

check_deps <<'EOF'
dmenu
ftp
mpv
notify-send
sxiv
xclip
yt-dlp
EOF

check_opts "$1"

import_colors_sh

readonly OPTIONS='copy duration
copy title
download audio
download file
download video
listen
print duration
read
view image
watch
watch (loop)'

NUM_OF_OPTS="$(echo "${OPTIONS}" | wc -l)"
readonly NUM_OF_OPTS

echo "${OPTIONS}" | linkhandler
