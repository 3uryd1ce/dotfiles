#!/usr/bin/env sh
# shellcheck disable=SC1090
# Copyright (c) 2020-2021 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -e

readonly LIBRARY="${HOME}/.local/bin/common.sh"

if [ -r "${LIBRARY}" ]; then
  . "${LIBRARY}"

else
  cat >&2 <<EOF
${LIBRARY} doesn't exist or isn't readable.
${0##*/} may not function correctly without it; exiting for safety.
EOF

  exit 1

fi


# if no arg is passed and STDIN is empty, exit with an error.
check_opts() {
  if [ -n "$1" ]; then
    readonly URL="$1"

  elif [ ! -t 0 ]; then
    read -r URL && readonly URL

  else
    err "${0##*/} needs a URL!"

  fi
}


# given a URL and a choice, perform the associated action.
#
# output is squelched for most options since I primarily use this with
# newsboat.
linkhandler() {
  case "$(menu -l "${num_of_opts}" -p 'What to do with this URL?')" in

    'copy duration')
      duration="$(youtube-dl --get-duration -- "${URL}" 2>/dev/null)"
      readonly duration

      if [ -n "${duration}" ]; then
        printf '%s' "${duration}" | yank
        notify-send -- "Copied video duration (${duration})."

      else
        err 'Empty input, so no duration was yanked.'

      fi

      ;;

    'copy title')
      title="$(youtube-dl -e -- "${URL}" 2>/dev/null)"
      readonly title

      if [ -n "${title}" ]; then
        printf '%s' "${title}" | yank
        notify-send -- "${title} yanked."

      else
        err 'Empty input, so no title yanked.'

      fi

      ;;

    'download audio')
      tmux new-window "youtube-dl -xf bestaudio/best -- ${URL}; read"

      ;;

    'download file')
      tmux new-window "(cd ${HOME}/Downloads && ftp -nU '' -- ${URL}); read"

      ;;

    'download video')
      tmux new-window "youtube-dl -- ${URL}; read"

      ;;

    'listen')
      tmux new-window "mpv \
      --no-video           \
      --no-pause           \
      --no-resume-playback \
      --no-keep-open       \
      -- ${URL}"

      ;;

    'print duration')
      duration="$(youtube-dl --get-duration -- "${URL}" 2>/dev/null)"

      if [ -n "${duration}" ]; then
        notify-send -- "${duration}"

      else
        err 'Empty input, so no duration printed.'

      fi

      ;;

    'read')
      tmux new-window "ftp -no - -U '' -- ${URL} | zathura -- -"

      ;;

    'view image')
      viewimg "${URL}"

      ;;

    'watch')
      tmux new-window "mpv -- ${URL}"

      ;;

    'watch (loop)')
      tmux new-window "mpv --speed=1 --loop -- ${URL}"

      ;;

    *)
      err "${0##*/} doesn't support that option."

      ;;

  esac
}


prereqs() {
  check_grafix

  check_deps <<'EOF'
dmenu
ftp
mpv
notify-send
sxiv
xclip
youtube-dl
EOF

  check_opts "$1"

  import_colors_sh
}


prereqs "$1"

readonly options='copy duration
copy title
download audio
download file
download video
listen
print duration
read
view image
watch
watch (loop)'

num_of_opts="$(echo "${options}" | wc -l)"
readonly num_of_opts

echo "${options}" | linkhandler
