#!/usr/bin/env sh
# shellcheck disable=SC1090
set -e
# Copyright (c) 2020-2021 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# check that the library file is readable. if it is, source it so its
# functions are available. if not, exit due to potentially unpredictable
# behavior.
readonly library="${HOME}/.local/bin/common.sh"
if [ -r "${library}" ]; then
  . "${library}"
else
  cat >&2 <<EOF
${library} doesn't exist or isn't readable.
${0##*/} may not function correctly without it; exiting for safety.
EOF
  exit 1
fi

# if no arg is passed and STDIN is empty, exit with an error.
check_opts() {
  if [ -n "$1" ]; then
    readonly URL="$1"
  elif [ ! -t 0 ]; then
    read -r URL && readonly URL
  else
    err "${0##*/} needs a URL!"
  fi
}

# given a URL and a choice, perform the associated action.
#
# output is squelched for most options since I primarily use this with
# newsboat.
linkhandler() {
  case "$(menu -l "${num_of_opts}" -p 'What to do with this URL?')" in
    'copy duration')
      if duration="$(youtube-dl --get-duration "${URL}" 2>/dev/null)"; then
        printf '%s' "${duration}" \
          | yank \
          && notify-send "Copied video duration (${duration})."
      else
        err 'Failed to copy video duration.'
      fi
      ;;
    'copy title')
      if title="$(youtube-dl -e "${URL}" 2>/dev/null)"; then
        printf '%s' "${title}" \
          | yank \
          && notify-send "Copied video title (${title})."
      else
        err 'Failed to copy video title.'
      fi
      ;;
    'download audio')
      youtube-dl -xf bestaudio/best "${URL}" >/dev/null 2>&1
      notify-send "Finished downloading audio from ${URL}."
      ;;
    'download file')
      (cd "${HOME}/Downloads" && ftp -VMnU '' "${URL}") >/dev/null 2>&1 \
        && notify-send "Finished downloading ${URL##*/}."
      ;;
    'download video')
      # sometimes youtube-dl will 'fail' because it can't embed an image
      # as a thumbnail, but it actually succeeded otherwise (downloaded
      # the video properly). an 'AND' list or if conditional doesn't
      # work here the way one would expect.
      #
      # also, notifications don't work for some reason here.
      youtube-dl --embed-subs "${URL}" >/dev/null 2>&1
      notify-send "Finished downloading video from ${URL}."
      ;;
    'listen')
      mpv --no-video --speed=1 "${URL}" >/dev/null 2>&1
      ;;
    'print duration')
      if duration="$(youtube-dl --get-duration "${URL}" 2>/dev/null)"; then
        notify-send "${duration}"
      else
        err "Duration couldn't be printed."
      fi
      ;;
    'read')
      ftp -VMno - -U '' "${URL}" | zathura - >/dev/null 2>&1
      ;;
    'view image')
      viewimg "${URL}"
      ;;
    # TODO: make 'watch' options more responsive. perhaps a notification
    # when the video is ready to play or something to that effect. the
    # absence of any visual indication affects my productivity negatively.
    'watch')
      mpv "${URL}" >/dev/null 2>&1
      ;;
    'watch (loop)')
      mpv --speed=1 --loop "${URL}" >/dev/null 2>&1
      ;;
    *)
      err "${0##*/} doesn't support that option."
  esac
}

prereqs() {
  check_grafix
  check_deps <<'EOF'
dmenu
ftp
mpv
notify-send
sxiv
xclip
youtube-dl
EOF
  check_opts "$1"
  import_colors
}

# defines options. count the number of options, then pass them + that
# number to linkhandler.
#
# TODO: linkhandler should clear its clipboard after a delay.
main() {
  prereqs "$1"
  readonly options='copy duration
copy title
download audio
download file
download video
listen
print duration
read
view image
watch
watch (loop)'
  readonly num_of_opts="$(echo "${options}" | wc -l)"
  echo "${options}" | linkhandler
}

main "$@"
