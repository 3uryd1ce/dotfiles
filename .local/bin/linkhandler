#!/usr/bin/env sh
# shellcheck disable=SC1090
set -e
# Copyright (c) 2020-2021 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# check that the library file is readable. if it is, source it so its
# functions are available. if not, exit due to potentially unpredictable
# behavior.
readonly library="${HOME}/.local/bin/common.sh"
if [ -r "${library}" ]; then
  . "${library}"
else
  cat >&2 <<EOF
${library} doesn't exist or isn't readable.
${0##*/} may not function correctly without it; exiting for safety.
EOF
  exit 1
fi

# if no arg is passed and STDIN is empty, exit with an error.
check_opts() {
  if [ -n "$1" ]; then
    readonly URL="$1"
  elif [ ! -t 0 ]; then
    read -r -- URL && readonly URL
  else
    err "${0##*/} needs a URL!"
  fi
}

# given a URL and a choice, perform the associated action.
#
# output is squelched for most options since I primarily use this with
# newsboat.
linkhandler() {
  case "$(menu -l "${num_of_opts}" -p 'What to do with this URL?')" in

    # TODO: seems to not grab duration properly.
    'copy duration')
      if duration="$(youtube-dl --get-duration -- "${URL}" 2>/dev/null)"; then

        if printf '%s' "${duration}" | yank; then
          notify-send -- "Copied video duration (${duration})."
        else
          err 'Failed to copy video duration.'
        fi

      else
        err 'Failed to get video duration.'
      fi
      ;;

    'copy title')
      if title="$(youtube-dl -e -- "${URL}" 2>/dev/null)"; then

        if printf '%s' "${title}" | yank; then
          notify-send -- "Copied video title (${title})."
        else
          err 'Failed to copy video title.'
        fi

      else
        err 'Failed to get video title.'
      fi
      ;;

    'download audio')
      tmux new-window "youtube-dl -xf bestaudio/best -- ${URL}; read"
      ;;

    'download file')
      tmux new-window "(cd ${HOME}/Downloads && ftp -nU '' -- ${URL}); read"
      ;;

    'download video')
      tmux new-window "youtube-dl -- ${URL}; read"
      ;;

    'listen')
      tmux new-window "mpv \
        --no-video \
        --no-pause \
        --no-resume-playback \
        --no-keep-open \
        -- ${URL}"
      ;;

    'print duration')
      if duration="$(youtube-dl --get-duration -- "${URL}" 2>/dev/null)"; then
        notify-send -- "${duration}"
      else
        err 'Failed to print duration.'
      fi
      ;;

    'read')
      tmux new-window "ftp -no - -U '' -- ${URL} | zathura -- -"
      ;;

    'view image')
      viewimg "${URL}"
      ;;

    'watch')
      tmux new-window "mpv -- ${URL}"
      ;;

    'watch (loop)')
      tmux new-window "mpv --speed=1 --loop -- ${URL}"
      ;;

    *)
      err "${0##*/} doesn't support that option."
      ;;

  esac
}

prereqs() {
  check_grafix
  check_deps <<'EOF'
dmenu
ftp
mpv
notify-send
sxiv
xclip
youtube-dl
EOF
  check_opts "$1"
  import_colors
}

# defines options. count the number of options, then pass them + that
# number to linkhandler.
#
# TODO: linkhandler should clear its clipboard after a delay.
main() {
  prereqs "$1"
  readonly options='copy duration
copy title
download audio
download file
download video
listen
print duration
read
view image
watch
watch (loop)'
  num_of_opts="$(echo "${options}" | wc -l)" && readonly num_of_opts
  echo "${options}" | linkhandler
}

main "$@"
