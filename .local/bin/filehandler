#!/bin/sh
# shellcheck disable=SC1090
# Copyright (c) 2020-2022 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -ex

readonly PROGRAM_NAME="${0##*/}"

err() {
	printf '%s\n' "$*" >&2
	exit 1
}

usage() {
	cat >&2 <<EOF
usage:
${PROGRAM_NAME} [operation] [file]

operations:
help - display help
copy - copy file
move - move file
rename - rename and then move file
EOF

	exit 1
}

menu() {
	dmenu -i -fn 'mono-12' \
		-nb "${background:-#040516}" \
		-nf "${color3:-#9974e7}" \
		-sb "${background:-#040516}" \
		-sf "${foreground:-#e0cef3}" \
		"$@"
}

print_preload_dir() {
	readonly FILE_TO_EXAMINE="$1"

	MIMETYPE="$(file -ib -- "${FILE_TO_EXAMINE}")"
	readonly MIMETYPE

	case "${MIMETYPE}" in
		application/epub) echo "${HOME}/books" ;;
		application/pdf) echo "${HOME}/books" ;;
		image/vnd.djvu) echo "${HOME}/books" ;;
		image/*) echo "${HOME}/pics" ;;
		video/*) echo "${HOME}/videos" ;;
		*) err 'No preload directory for this filetype.' ;;
	esac
}

handle_destination() {
	readonly FILE_WITHOUT_DESTINATION="$1"
	BASENAME="${FILE_WITHOUT_DESTINATION##*/}"

	PRELOAD_DIR="$(print_preload_dir "${FILE_WITHOUT_DESTINATION}")"
	readonly PRELOAD_DIR

	[ -d "${PRELOAD_DIR}" ] || err "'${PRELOAD_DIR}' is not a directory."


	# Substitute ${HOME} with a tilde so the list of directories in
	# dmenu is more readable.
	DESTINATION="$(
		{
		find "${PRELOAD_DIR}" -type d | sed "s|^${HOME}|~|g"
		echo 'exit'
		} | menu -l 10 -p "Where should ${BASENAME} be placed?"
	)"

	[ -n "${DESTINATION}" ] || err "${PROGRAM_NAME} needs a destination."
	[ "${DESTINATION}" = 'exit' ] && exit


	# Revert prior substitution.
	DESTINATION="$(echo "${DESTINATION}" | sed -- "s|^~|${HOME}|g")"
	readonly DESTINATION

	mkdir -p -- "${DESTINATION}" ||
		err "Failed to create directory '${DESTINATION}'."
}

copy_file() {
	readonly FILE_TO_COPY="$1"
	handle_destination "${FILE_TO_COPY}"
	readonly BASENAME

	cp -- "$1" "${DESTINATION}/${BASENAME}" && {
		notify-send -- "'${BASENAME}' copied to '${DESTINATION}'"
		return
	}

	err "Failed to copy '${BASENAME}'"
}

move_file() {
	readonly FILE_TO_MOVE="$1"

	# This may have been handled by rename_file already.
	[ -z "${DESTINATION}" ] && handle_destination "${FILE_TO_MOVE}"
	readonly BASENAME

	mv -- "$1" "${DESTINATION}/${BASENAME}" && {
		notify-send -- "'${BASENAME}' moved to '${DESTINATION}'"
		return
	}

	err "Failed to move '${BASENAME}'"
}

rename_file() {
	readonly FILE_TO_RENAME="$1"
	handle_destination "${FILE_TO_RENAME}"

	BASENAME="$(echo 'exit' | menu -p "Rename '${BASENAME}' to what?")"

	[ -n "${BASENAME}" ] ||
		err "${PROGRAM_NAME} needs a new name to rename '${BASENAME}' to."

	[ "${BASENAME}" = 'exit' ] && exit

	move_file "${FILE_TO_RENAME}"
}


readonly COLORS_SH="${XDG_CACHE_HOME:-${HOME}/.cache}/wal/colors.sh"

readonly DEPENDENCIES='dmenu
notify-send'

echo "${DEPENDENCIES}" | while read -r dependency; do
	command -v -- "${dependency}" >/dev/null 2>&1 ||
		err "${dependency} not found in PATH."
done


[ -n "$1" ] || usage
[ -n "$2" ] || usage
[ -n "${DISPLAY}" ] || err "${PROGRAM_NAME} requires a graphical environment."
. "${COLORS_SH}"


FILE_TO_HANDLE="$(readlink -f -- "$2")"
readonly FILE_TO_HANDLE

readonly OPERATION="$1"

case "${OPERATION}" in
	'copy') copy_file "${FILE_TO_HANDLE}" ;;
	'move') move_file "${FILE_TO_HANDLE}" ;;
	'rename') rename_file "${FILE_TO_HANDLE}" ;;
	'help'|*) usage ;;
esac
