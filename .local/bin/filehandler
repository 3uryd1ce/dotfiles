#!/usr/bin/env sh
# shellcheck disable=SC1090,SC2034
set -e
# Copyright (c) 2020-2021 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# check that the library file is readable. if it is, source it so its
# functions are available. if not, exit due to potentially unpredictable
# behavior.
library="${HOME}/.local/bin/common.sh"
if [ -r "${library}" ]; then
  . "${library}"
else
  cat >&2 <<EOF
${library} doesn't exist or isn't readable.
${0##*/} may not function correctly without it; exiting for safety.
EOF
  exit 1
fi

# assigns a value to ${preload_dir} based on the file's mimetype.
determine_preload_dir() {
  mimetype="$(file -ib "${file}")"
  case "${mimetype}" in
    # these are organized alphabetically by mimetype
    application/epub*) preload_dir="${HOME}/books"                            ;;
    application/pdf*)  preload_dir="${HOME}/books"                            ;;
    image/*)           preload_dir="${HOME}/pics"                             ;;
    video/*)           preload_dir="${HOME}/videos"                           ;;
    *)                 err "${mimetype} isn't handled by ${0##*/} currently." ;;
  esac
}

# uses ${preload_dir} to display a list of directories that a given file
# can be moved to. once the user chooses a destination with dmenu, move
# the file there and send a notification.
move_file() {
  determine_preload_dir
  dest="$(
    (find "${preload_dir}" -type d; echo 'exit') \
      | menu -l 10 -p "Move ${file} where?"
  )"
  [ "${dest}" = 'exit' ] && exit 0
  if [ -d "${dest}" ] && mv "${file}" "${dest}/${file##*/}"; then
    dest="$(echo "${dest}" | sed "s|${HOME}|~|g")"
    notify-send "${file##*/} moved to ${dest}"
  fi
}

# once the user chooses a filename with dmenu, rename the file
# accordingly and send a notification.
#
# dmenu seems to need at least one item from STDIN to behave properly.
rename_file() {
  new_filename="$(echo 'exit' | menu -p "Rename ${file##*/} to what?")"
  if [ -n "${new_filename}" ]; then
    [ "${new_filename}" = 'exit' ] && exit 0
    mv "${file}" "${file%/*}/${new_filename}"
    notify-send "${file##*/} renamed to ${new_filename}"
  fi
}

# determines how to operate on the file. if nothing was assigned to
# ${operation} by getopts, the user chooses the operation with dmenu.
choose_operation() {
  if [ -z "${operation}" ]; then
    options='move
rename'
    operation="$(echo "${options}" | menu -p "What to do with ${file}?")"
    # a small delay needs to be here. without it, the subsequent menu
    # won't appear sometimes.
    sleep 0.3
  fi
  case "${operation}" in
    'move')   move_file              ;;
    'rename') rename_file            ;;
    *)        err "${usage_details}" ;;
  esac
}

# parse options. get the absolute pathname of the file and use that as
# the first argument for choose_operation.
main() {
  check_grafix
  arguments_needed=1
  usage_details="${0##*/} requires ${arguments_needed} argument(s).

usage:
${0##*/} [options] [file]

options:
-h: help
-m: move file (operation)
-n: rename file (operation)

If invoked without any options, ${0##*/} behaves interactively and asks
the user for an operation.

If an operation is specified, ${0##*/} skips the operation query and
moves on to the next prompt.

Note that only one operation should be specified at a time. In fact,
${0##*/} only processes the first operation it sees."
  while getopts hmn opt; do
    case "${opt}" in
      'h') echo "${usage_details}" && exit 0 ;;
      'm') operation='move' && break         ;;
      'n') operation='rename' && break       ;;
      *)   err "${usage_details}"            ;;
    esac
  done
  shift $((OPTIND - 1))
  arg_eq "$@"
  import_colors
  [ -f "$1" ] || err 'Not a file.'
  file="$(readlink -f "$1")"
  choose_operation
}

main "$@"
