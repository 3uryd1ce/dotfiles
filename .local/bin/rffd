#!/usr/bin/env sh
# shellcheck disable=SC1090
set -e
# Copyright (c) 2020-2021 Ashlen <eurydice@riseup.net>

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# check that LIBRARY is readable. if it is, source it so its
# functions are available. if not, exit due to potentially unpredictable
# behavior.
readonly LIBRARY="${HOME}/.local/bin/common.sh"

if [ -r "${LIBRARY}" ]; then
  . "${LIBRARY}"

else
  cat >&2 <<EOF
${LIBRARY} doesn't exist or isn't readable.
${0##*/} may not function correctly without it; exiting for safety.
EOF

  exit 1

fi


# usage information for random file from directory (rffd)
usage() {
  cat >&2 <<EOF
${0##*/} [flags] [filetype] [directory]

flags can be:
-c: number of files to return, aka (c)ount. specify 0 for no
    limit/count, i.e., return all results.
-h: usage information

filetype can be:
video - webm, mp4, mkv
pic   - jpg, jpeg, png
any   - matches all files
EOF

  exit 1
}


# the base find(1) command for find_* functions to use. will only return
# files.
#
# $1 is a path for find(1) to search. base_find_cmd() then accepts all
# positional parameters after that.
base_find_cmd() {
  search_path="$1"
  shift

  find "${search_path}" -type f "$@"
}


# given a directory, print all video files in it.
find_videos() {
  base_find_cmd "$1" \
  \(                 \
  -iname '*.webm' -o \
  -iname '*.mp4'  -o \
  -iname '*.mkv'     \
  \)
}


# given a directory, print all photos in it.
find_pics() {
  base_find_cmd "$1" \
  \(                 \
  -iname '*.jpg'  -o \
  -iname '*.jpeg' -o \
  -iname '*.png'     \
  \)
}


prereqs() {
  if [ -z "$1" ]; then
    echo "${0##*/} needs a filetype." >&2
    echo >&2
    usage

  elif [ -z "$2" ]; then
    echo "${0##*/} needs a directory to search." >&2
    echo >&2
    usage

  elif ! [ -d "$2" ]; then
    err "$2 is not a directory"

  fi
}


while getopts c:h opt; do

  case "${opt}" in
    c) readonly COUNT="${OPTARG}" ;;
    h) usage                      ;;
    *) usage                      ;;
  esac

done

shift $((OPTIND - 1))

prereqs "$@"

# if ${COUNT} is unset, 1 result is returned by default
: "${COUNT:=1}"

# sanity check
case "${COUNT}" in
  *[!0-9]*) err 'The -c option only accepts integers.'          ;;
  *)           # COUNT is an integer, so do nothing and proceed ;;
esac

case "$1" in

  'video') find_videos "$2"        ;;
  'pic')   find_pics "$2"          ;;
  'any')   base_find_cmd "$2"      ;;
  *)       err 'Invalid filetype.' ;;

esac |

  if [ "${COUNT}" = 0 ]; then
    sort -R

  else
    sort -R | head -"${COUNT}"

  fi
