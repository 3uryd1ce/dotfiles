#!/usr/bin/env sh
# shellcheck disable=SC1090,SC2154

# rewrite of Luke Smith's dmenuunicode:
# https://github.com/LukeSmithxyz/voidrice/blob/master/.local/bin/dmenuunicode

# his dotfiles can be accessed here:
# https://github.com/LukeSmithxyz/voidrice


err() {
  printf '%s\n' "$*" >&2
  exit 1
}


menu() {
  dmenu -i -fn 'mono-12'       \
  -nb "${background:=#040516}" \
  -nf "${color3:=#9974e7}"     \
  -sb "${background:=#040516}" \
  -sf "${foreground:=#e0cef3}" \
  "$@"
}


import_colors_sh() {
  COLORS_SH="${XDG_CACHE_HOME:=${HOME}/.cache}/wal/colors.sh"

  if ! [ -r "${COLORS_SH}" ]; then
    : "${DOTFILES_LOG:=${XDG_DATA_HOME:=${HOME}/.local/share}/dotfiles.log}"
    echo "${COLORS_SH} not readable." 2>>"${DOTFILES_LOG}" >&2

  elif ! [ -f "${COLORS_SH}" ]; then
    : "${DOTFILES_LOG:=${XDG_DATA_HOME:=${HOME}/.local/share}/dotfiles.log}"
    echo "${COLORS_SH} not a file." 2>>"${DOTFILES_LOG}" >&2

  # passed sanity checks, so source the file
  else
    . "${COLORS_SH}"

  fi
}


check_deps() {
  while read -r dependency; do

    if [ -x "$(command -v -- "${dependency}")" ]; then
      continue

    else
      err "${dependency} not found in PATH or not executable."

    fi

  done
}


grab_emoji() {
  readonly EMOJI_FILE="${XDG_DATA_HOME:=${HOME}/.local/share}/emoji"
  [ -f "${EMOJI_FILE}" ] || err "${EMOJI_FILE} is not a file."
  [ -r "${EMOJI_FILE}" ] || err "${EMOJI_FILE} is not readable."

  chosen_entry="$(cut -d ';' -f 1 -- "${EMOJI_FILE}" | menu -l 20 -fn 'Symbola-12')"
  readonly chosen_entry

  [ -n "${chosen_entry}" ] || err 'Must choose an emoji.'

  readonly emoji="${chosen_entry%% *}"

  grep -q -- "^${emoji}" "${EMOJI_FILE}" || err "Emoji not found in ${EMOJI_FILE}."

  # important to use printf %s here, as ${emoji} is user input
  #
  # also important to not send a newline to yank() aka xclip(1),
  # otherwise pasting from the clipboard in certain messengers will send
  # the message.
  if printf '%s' "${emoji}" | xclip -selection clipboard; then
    notify-send -- "${emoji} copied to clipboard."

  else
    err 'Unable to grab emoji with xclip(1).'

  fi
}


[ -z "${DISPLAY}" ] && err "${0##*/} requires a graphical environment."

check_deps <<'EOF'
dmenu
notify-send
xclip
EOF

import_colors_sh

grab_emoji
