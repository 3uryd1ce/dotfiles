#!/usr/bin/env perl
# Copyright (c) 2022-2023 Ashlen <dev@anthes.is>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use v5.36;
use autodie qw(:all);

use File::Basename qw(fileparse);
use File::Temp qw(tempfile);
use HTTP::Tiny;

# External modules.
use IPC::System::Simple;
use URI;

BEGIN {
	if ( $^O eq 'openbsd' ) {
		require Anthesis::OpenBSD::Pledge;
		require Anthesis::OpenBSD::Unveil;
		Anthesis::OpenBSD::Pledge->import(qw(pledge_or_die));
		Anthesis::OpenBSD::Unveil->import(qw(unveil_or_die));
	}
};

my $sxiv = $^O eq 'openbsd' ? '/usr/local/bin/sxiv' : 'sxiv';

if ( $^O eq 'openbsd' ) {
	pledge_or_die(qw(rpath tmppath fattr proc exec prot_exec dns inet unveil));

	my %unveiled_paths = (
		'/etc/ssl/cert.pem' => 'r',   # TLS
		'/tmp' => 'rwc',   # tmpfile
		'/usr/lib' => 'r',   # libcrypto, libssl
		'/usr/libdata/perl5' => 'r',   # modules
		'/usr/local/bin/sxiv' => 'rx',   # image viewer
		'/usr/local/libdata/perl5/site_perl' => 'r',   # modules
	);

	while ( my ( $path, $permissions ) = each %unveiled_paths ) {
		unveil_or_die( $path, $permissions );
	}

	# No need for unveil anymore.
	pledge_or_die(qw(rpath tmppath fattr proc exec prot_exec dns inet));
}

my $program_name = fileparse $0;

my $url = shift or die "$program_name needs a URL.\n";
$url =~ s/\Ahttp:/https:/;
$url = URI->new($url);
$url->scheme eq 'https'
	or die "$program_name only supports the 'https' scheme.\n";

$ENV{'DISPLAY'} // die "$program_name needs a graphical environment!\n";

chdir '/tmp';

my $http = HTTP::Tiny->new( verify_SSL => 1, );
$http->can_ssl or die "No TLS support: $!\n";

my $response = $http->get($url);

# No need for dns or inet anymore, as the request is stored.
pledge_or_die(qw(rpath tmppath fattr proc exec prot_exec)) if $^O eq 'openbsd';

$response->{success} or die "$response->{status} $response->{reason}\n";

my ( $tmp_fh, $tmpfile ) = tempfile UNLINK => 1;
open $tmp_fh, '>', $tmpfile;
print $tmp_fh $response->{content};
close $tmp_fh;

# Cannot be exec, since the temporary file needs to be cleaned up.
system $sxiv, '--', $tmpfile;

pledge_or_die(qw(rpath tmppath fattr)) if $^O eq 'openbsd';
