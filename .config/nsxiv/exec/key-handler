#!/usr/bin/env perl
# Copyright (c) 2022-2023 Ashlen <dev@anthes.is>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# TODO:
# Read files from STDIN into an array and act on them so execution only
# happens once (useful for moving files in bulk). On a related note,
# make 'y' and 'Y' bindings useful in this context. Renaming files in
# bulk could not happen this way (file clobbering), so that must be
# revisited as well.
#
# eval the things we don't care about succeeding/failing (filehandler?),
# or change filehandler so it doesn't send a >0 exit code when
# move/rename/copy are given empty parameters.

use v5.36;
use autodie qw(:all);

use File::Basename qw(fileparse);
use File::Spec::Functions qw(catdir catfile rel2abs);
use IPC::Open2;

# External.
use IPC::System::Simple;
use Graphics::Magick;

use Anthesis::Dotfiles::Pywal qw(import_pywal_colors);

sub yank ($stuff_to_copy) {
	chomp $stuff_to_copy;
	open my $xclip_fh, '|-', qw(xclip -selection clipboard);

	print $xclip_fh $stuff_to_copy;
	close $xclip_fh;
}

my $xdg_cache_home = $ENV{'XDG_CACHE_HOME'} // catdir $ENV{'HOME'}, '.cache';
my $colors_wal = catfile $xdg_cache_home, qw(wal colors);

my $colors_hashref = import_pywal_colors $colors_wal;

#<<<
my @dmenu_options = (
	'-i',
	'-fn', 'mono-12',
	'-nb', $colors_hashref->{background},
	'-nf', $colors_hashref->{color3},
	'-sb', $colors_hashref->{background},
	'-sf', $colors_hashref->{foreground},
);
#>>>

my $key = shift or die "Need a key.\n";

while ( my $file = <STDIN> ) {
	chomp $file;

	for ($key) {
		if ( $_ eq 'c') { system qw(filehandler copy ), $file; }

		elsif ( $_ eq 'd' ) {
			my $menu_pid =
				open2( my $menu_out, my $menu_in, 'dmenu', @dmenu_options,
					'-p', "Really delete $file?" );

			say $menu_in join "\n", qw(Yes No);
			close $menu_in;

			chomp( my $user_response = <$menu_out> // 'No' );
			close $menu_out;
			waitpid( $menu_pid, 0 );

			if ( $user_response eq 'Yes' ) {
				unlink $file;
				system qw(notify-send --), "$file deleted!";
			}
		}

		elsif ( $_ eq 'm') { system qw(filehandler move ), $file; }
		elsif ( $_ eq 'n') { system qw(filehandler rename ), $file; }
		elsif ( $_ eq 'r' ) {
			my $gm = Graphics::Magick->new;
			$gm->Read($file);
			$gm->Rotate(90);
			$gm->Write($file);
		}

		elsif ( $_ eq 'R' ) {
			my $gm = Graphics::Magick->new;
			$gm->Read($file);
			$gm->Rotate(-90);
			$gm->Write($file);
		}

		elsif ( $_ eq 'f' ) {
			my $gm = Graphics::Magick->new;
			$gm->Read($file);
			$gm->Flop();
			$gm->Write($file);
		}

		elsif ( $_ eq 'y' ) {
			my $basename = fileparse $file;
			yank $basename;
			system qw(notify-send --),
				"File name ($basename) copied to clipboard.";
		}

		elsif ( $_ eq 'Y' ) {
			my $absolute_path = rel2abs $file or die "Need an absolute path!\n";
			yank $absolute_path;
			system qw(notify-send --),
				"File path ($absolute_path) copied to clipboard.";
		}

		else { die "Key not bound!\n"; }
	}
}
