#!/usr/bin/env ksh

# essentially, anything too simple to warrant its own shell script
#
# note that some of these functions use aliases. if certain behavior for
# a program is documented in a comment and the flag to enable that
# behavior isn't present, it may be in "${XDG_CONFIG_HOME}/ksh/aliases".
#
# one may also use `typeset -f [function]` or `functions [function]` to
# display what aliases expand to within a function.

# a wrapper around curl(1) that passes -x to use tor(1).
anoncurl() {
	case "$@" in
		'' | '-h')
			echo 'curl(1) with tor(1).
otherwise, use it the same way you would use curl(1).' >&2

			return
			;;
	esac

	curl -x socks5://127.0.0.1:9050 "$@"
}

# with a user agent of 'curl', no progress meter, no auto-login, and no
# verbose mode, use ftp(1) to send a GET request to cht.sh with $1 as
# the path and send the results to STDOUT.
#
# $1 is a program one wants to learn more about.
cht() {
	case "$1" in
		'' | '-h')
			echo 'retrieve command cheat sheets from cht.sh
cht [command name]' >&2

			return
			;;
	esac

	ftp -U 'curl' -VMo - -- "https://cht.sh/$1"
}

# if $1 ends in '.bak', copy $1 to an identically named file except the
# new file omits '.bak'.
#
# otherwise, copy $1 to an identically named file except the new file
# ends in '.bak'.
#
# $1 is a file.
cpbak() {
	case "$1" in
		'' | '-h')
			echo 'if the given file ends in ".bak", copy to an identically
named file except the new file omits ".bak".

otherwise, copy the given file to an identically named file except the
new file ends in ".bak".

cpbak [file]' >&2

			return
			;;
	esac

	case "${1##*.bak}" in
		'') cp -- "$1" "${1%.bak}" ;;
		*) cp -- "$1" "$1.bak" ;;
	esac
}

fzf_hist() {
	RES="$(fzf --tac --no-sort -e < "${HISTFILE}")"
	[ -n "${RES}" ] || return 0
	eval "${RES}"
}

# with no auto-login, no progress meter and no verbose mode, use ftp(1)
# to send a GET request to ipinfo.io with $1 as the path. Then, send the
# results to STDOUT.
#
# $1 is an IP address.
ipinf() {
	case "$1" in
		'' | '-h')
			echo 'display IP address information from ipinfo.io
ipinf [IP address]' >&2

			return
			;;
	esac

	ftp -VMo - -- "https://ipinfo.io/$1"
}

# read a markdown document with man(1).
manmd() {
	case "$1" in
		'' | '-h')
			echo 'read a markdown document with man(1).
manmd [markdown document]' >&2

			return
			;;
	esac

	lowdown -T 'man' "$1" | mandoc -a
}

# if $1 ends in '.bak', remove '.bak' from the filename.
# otherwise, append '.bak' to the filename.
#
# $1 is a file.
mvbak() {
	case "$1" in
		'' | '-h')
			echo 'if the given file ends in ".bak", remove ".bak" from the filename.
otherwise, append ".bak" to the filename.

mvbak [file]' >&2

			return
			;;
	esac

	if [ -z "${1##*/}" ]; then
		MVBAK_FILE="${1%/}"
	else
		MVBAK_FILE="$1"
	fi

	case "${MVBAK_FILE##*.bak}" in
		'') mv -- "${MVBAK_FILE}" "${MVBAK_FILE%.bak}" ;;
		*) mv -- "${MVBAK_FILE}" "${MVBAK_FILE}.bak" ;;
	esac
}

# nc(1) + tor(1) = fun.
nc_tor() {
	case "$@" in
		'' | '-h')
			echo 'nc(1) + tor(1) = nc_tor()
otherwise, use it the same way you would use nc(1).' >&2

			return
			;;
	esac

	nc -X 5 -x 127.0.0.1:9050 "$@"
}

# Function wrapper for rcctl ls, for completions.
# Is there a way to use doas(1) with completions without doing this?
rcctl_ls() {
	case "$1" in
		'failed' | 'rogue' | 'started' | 'stopped')
			CMD='doas rcctl ls'
			;;
		*)
			CMD='rcctl ls'
			;;
	esac
	${CMD} "$1"
}

# read a markdown document with less(1).
readmd() {
	case "$1" in
		'' | '-h')
			echo 'read a markdown document with less(1).
readmd [markdown document]' >&2

			return
			;;
	esac

	lowdown -T 'term' --term-no-colour "$1" | less
}

# Taskwarrior configuration function. For completion purposes.
task_config() {
	task config "$@"
}

# with a user agent of 'curl', no progress meter, no auto-login, and no
# verbose mode, use ftp(1) to send a GET request to wttr.in with $1 as
# the path. Then, send the results to STDOUT.
#
# $1 is a geographical location for weather forecasting purposes.
wttr() {
	case "$1" in
		'' | '-h')
			echo 'get weather information.
wttr [location]' >&2

			return
			;;
	esac

	ftp -U 'curl' -VMo - -- "https://wttr.in/$1"
}

# for downloading YouTube channels/playlists
ytpl() {
	yt-dlp \
		--download-archive './archive.txt' \
		--output './%(title)s.%(ext)s' \
		--match-filter "playlist_title != 'Liked videos' & playlist_title != 'Favorites'" \
		"$@"
}
