# essentially, anything too simple to warrant its own shell script
#
# note that some of these functions use aliases. if certain behavior for
# a program is documented in a comment and the flag to enable that
# behavior isn't present, it may be in "${XDG_CONFIG_HOME}/ksh/aliases".
#
# one may also use `typeset -f [function]` or `functions [function]` to
# display what aliases expand to within a function.

# a wrapper around curl(1) that passes -x to use tor(1).
anoncurl() {
	case "$@" in

		''|'-h')
			echo 'curl(1) with tor(1).

otherwise, use it the same way you would use curl(1).' >&2

			return

			;;

	esac

	curl -x socks5://127.0.0.1:9050 "$@"
}

# using torsocks(1) and ftp(1) with no auto-login or user agent, send a
# GET request to $1 and send the results to STDOUT. zathura(1) reads
# from STDIN and displays the document.
#
# $1 is a URL linking to a type of document (PDF, EPUB, etc.) that
# zathura(1) can open.
anonread() {
	case "$1" in

		''|'-h')
			echo 'read PDFs with tor(1).

anonread [URL linking to an ebook]' >&2

			return

			;;

	esac

	anonftp -o - -- "$1" | zathura -
}

# invoke apropos(1) to match $1 against any available macro key of
# manpages that match the current machine architecture.
#
# $1 is a word/phrase to search for (phrases must be quoted).
aprv() {
	case "$1" in

		''|'-h')
			echo 'invoke apropos(1) to match the given query against any available macro
key of manpages that match the current machine architecture.

aprv [query]' >&2

			return

			;;

	esac

	apropos -S "$(uname -m)" -- any="$1"
}

# with a user agent of 'curl', no progress meter, no auto-login, and no
# verbose mode, use ftp(1) to send a GET request to cht.sh with $1 as
# the path and send the results to STDOUT.
#
# $1 is a program one wants to learn more about.
cht() {
	case "$1" in

		''|'-h')
			echo 'retrieve command cheat sheets from cht.sh

cht [command name]' >&2

			return

			;;

	esac

	ftp -U 'curl' -VMo - -- "https://cht.sh/$1"
}


# if $1 ends in '.bak', copy $1 to an identically named file except the
# new file omits '.bak'.
#
# otherwise, copy $1 to an identically named file except the new file
# ends in '.bak'.
#
# $1 is a file.
cpbak() {
	case "$1" in

		''|'-h')
			echo 'if the given file ends in ".bak", copy to an identically named file
except the new file omits ".bak".

otherwise, copy the given file to an identically named file except the
new file ends in ".bak".

cpbak [file]' >&2

			return

			;;

	esac

	case "${1##*.bak}" in
		'') cp -- "$1" "${1%.bak}" ;;
		*) cp -- "$1" "$1.bak" ;;
	esac
}

# choose files with fzf and edit them.
ebin() { fzf-open "${EDITOR}" "${XDG_BIN_HOME}"; }
econf() { fzf-open "${EDITOR}" "${XDG_CONFIG_HOME}"; }
enotes() { fzf-open "${EDITOR}" "${HOME}/notes"; }

fzf_hist() {
	RES="$(fzf --tac --no-sort -e < "${HISTFILE}")"
	[ -n "${RES}" ] || return 0
	eval "${RES}"
}

# perform an A record lookup on $1 and return the IP address.
#
# $1 is a domain.
grabipv4() {
	case "$1" in

		''|'-h')
			echo 'perform an A record lookup and return the IP address.

grabipv4 [IP address]' >&2

			return

			;;

	esac

	dig A +short "$1"
}

# perform an AAAA record lookup on $1 and return the IPv6 address.
#
# $1 is a domain.
grabipv6() {
	case "$1" in

		''|'-h')
			echo 'perform an AAAA record lookup and return the IPv6 address.

grabipv6 [IPv6 address]' >&2

			return

			;;

	esac

	dig AAAA +short "$1"
}

# with no auto-login, no progress meter and no verbose mode, use ftp(1)
# to send a GET request to ipinfo.io with $1 as the path. Then, send the
# results to STDOUT.
#
# $1 is an IP address.
ipinf() {
	case "$1" in

		''|'-h')
			echo 'display IP address information from ipinfo.io

ipinf [IP address]' >&2

			return

			;;

	esac

	ftp -VMo - -- "https://ipinfo.io/$1"
}

# journal
jrnl() {
	case "$@" in

		'') # being used as intended

			;;

		'-h'|*)
			echo "jrnl (for journaling) takes no arguments.

It creates ${HOME}/notes/journal/$(date '+%F').txt (including the
directory tree, if it doesn't exist) with appropriate formatting and
then opens up the file in ${EDITOR:-EDITOR}." >&2

			return

			;;

	esac

	[ -z "${EDITOR}" ] && {
		echo 'jrnl() needs EDITOR to be defined.' >&2
		return 1
	}

	TODAY="$(date '+%F')"
	JRNL_ENTRY="${HOME}/notes/journal/${TODAY}.txt"

	# easier to just create the directory than error
	mkdir -p "${JRNL_ENTRY%/*}"

	if ! [ -e "${JRNL_ENTRY}" ]; then {
		echo
		echo "${TODAY}"
		date '+%H:%M'
	} > "${JRNL_ENTRY}"

	else {
		echo
		echo '-'
		date '+%H:%M'
	} >> "${JRNL_ENTRY}"

	fi

	"${EDITOR}" "${JRNL_ENTRY}"
}

# read a markdown document with man(1).
manmd() {
	case "$1" in

		''|'-h')
			echo 'read a markdown document with man(1).

manmd [markdown document]' >&2

			return

		;;

	esac

	lowdown -T 'man' "$1" | mandoc -a
}

# if $1 ends in '.bak', remove '.bak' from the filename.
# otherwise, append '.bak' to the filename.
#
# $1 is a file.
mvbak() {
	case "$1" in

		''|'-h')
			echo 'if the given file ends in ".bak", remove ".bak" from the filename.
otherwise, append ".bak" to the filename.

mvbak [file]' >&2

			return

			;;

	esac


	if [ -z "${1##*/}" ]; then
		MVBAK_FILE="${1%/}"

	else
		MVBAK_FILE="$1"

	fi


	case "${MVBAK_FILE##*.bak}" in
		'') mv -- "$MVBAK_FILE" "${MVBAK_FILE%.bak}" ;;
		*) mv -- "$MVBAK_FILE" "$MVBAK_FILE.bak" ;;
	esac
}

# checks the headers of a website with tor(1).
# nc_head [path] [domain] 80 for HTTP.
# nc_head [path] -c [domain] 443 for HTTPS.
nc_head() {
	case "$1" in

		''|'-h')
			echo 'checks the headers of a website with tor(1).

HTTP:
nc_head [path] [domain] 80

HTTPS:
nc_head [path] -c [domain] 443' >&2

			return

			;;

	esac

	URI="$1"
	shift
	printf "%s\r\n\r\n" "HEAD ${URI} HTTP/1.0" | nc_tor "$@"
}

# nc(1) + tor(1) = fun.
nc_tor() {
	case "$@" in

		''|'-h')
			echo 'nc(1) + tor(1) = nc_tor()

otherwise, use it the same way you would use nc(1).' >&2

			return

			;;

	esac

	nc -X 5 -x 127.0.0.1:9050 "$@"
}

# with rffd, open up random pics with sxiv(1).
randpics() {
	case "$1" in

		''|'-h')
			echo 'with rffd, open up random pics with sxiv(1).

randpics [directory with pics]' >&2

			return

			;;

	esac

	rffd -c 0 pic "$1" | tr '\n' '\0' | xargs -0 -- sxiv --
}

# with rffd, open up random videos with mpv(1).
randvids() {
	case "$1" in

		''|'-h')
			echo 'with rffd, open up random videos with mpv(1).

randvids [directory with videos]' >&2

			return

			;;

	esac

	rffd -c 0 video "$1" | tr '\n' '\0' | xargs -0 -- mpv --no-resume-playback --
}

# choose a book with fzf and read it.
readabook() { fzf-open "${READER}" "${HOME}/books"; }

# read a markdown document with less(1).
readmd() {
	case "$1" in

		''|'-h')
			echo 'read a markdown document with less(1).

readmd [markdown document]' >&2

			return

			;;

	esac

	lowdown -T 'term' --term-no-colour "$1" | less
}

# sorts a file and removes unique entries.
# note that sortfile modifies (replaces) the original copy.
sortfile() {
	[ -n "$*" ] || {
		echo 'sortfile /path/to/file ...
note that sortfile modifies (replaces) the original copy.' >&2
		return 1
	}

	for file_to_be_sorted in "$@"; do

		[ -f "${file_to_be_sorted}" ] || {
			echo "${file_to_be_sorted} is not a file." >&2
			continue
		}

		[ -w "${file_to_be_sorted}" ] || {
			echo "${file_to_be_sorted} is not writable." >&2
			continue
		}

		tmpfile="$(mktemp)" || {
			echo "${tmpfile} could not be created, exiting." >&2
			return 1
		}

		sort -u "${file_to_be_sorted}" > "${tmpfile}" || {
			echo "${file_to_be_sorted} could not be sorted and written to ${tmpfile}." >&2
			continue
		}

		mv "${tmpfile}" "${file_to_be_sorted}" || {
			echo "${tmpfile} could not be moved to ${file_to_be_sorted}." >&2
			continue
		}

	done
}

# usage:
#
# tarpv [archive target] > filename
tarpv() {
	case "$1" in

		''|'-h')
			echo 'archive something with tar(1) and watch progress with pv(1).

without compression:
tarpv [archive target] > filename

with compression:
tarpv [archive target] | gzip -c > filename' >&2

			return

			;;

	esac

	# command -v will match the alias
	DU="$(which 'du')"

	SIZE_OF_DIR="$(
		"${DU}" -sh "$1" \
			| sed -E "s/\.([[:digit:]])+//" \
			| cut -f 1
	)"

	tar -cf - "$1" | pv -s "${SIZE_OF_DIR}"
}

# test Matrix federation and output the JSON.
#
# $1 is a domain name associated with a Matrix homeserver.
testfed() {
	case "$1" in

		''|'-h')
			echo 'test Matrix federation and output the JSON.

testfed [matrix homeserver domain]' >&2

		return

		;;

	esac

	ftp -U '' -VMno - -- \
		"https://federationtester.matrix.org/api/report?server_name=$1"
}

# convert H.264 to HEVC using ffmpeg and x265
to265() {
   [ -z "$1" ] && {
       echo 'Need an input file.' >&2
       return
   }

   ffmpeg -i "$1" -c:v libx265 -preset slow -c:a copy "${1%.mp4}-x265.mp4"
}

# use bioctl(8) to unlock an encrypted partition and attach it to
# softraid0.
#
# $1 is an encrypted partition.
unlockhdd() {
	case "$1" in

		''|'-h')
			echo 'unlock a drive encrypted with bioctl(8).

unlockhdd [encrypted partition]' >&2

			return

			;;

	esac

	priv bioctl -c C -l "$1" softraid0
}

# with a user agent of 'curl', no progress meter, no auto-login, and no
# verbose mode, use ftp(1) to send a GET request to wttr.in with $1 as
# the path. Then, send the results to STDOUT.
#
# $1 is a geographical location for weather forecasting purposes.
wttr() {
	case "$1" in

		''|'-h')
			echo 'get weather information.

wttr [location]' >&2

			return

			;;

	esac

	ftp -U 'curl' -VMo - -- "https://wttr.in/$1";
}


# for downloading YouTube channels/playlists
ytpl() {
	yt-dlp \
		--download-archive './archive.txt' \
		--output './%(title)s.%(ext)s' \
		--match-filter "playlist_title != 'Liked videos' & playlist_title != 'Favorites'" \
		"$@"
}
