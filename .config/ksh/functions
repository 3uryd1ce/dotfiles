# essentially, anything too simple to warrant its own shell script
#
# note that some of these functions use aliases. if certain behavior for
# a program is documented in a comment and the flag to enable that
# behavior isn't present, it may be in "${HOME}/.config/ksh/aliases".
#
# one may also use `typeset -f [function]` or `functions [function]` to
# display what aliases expand to within a function.

# a wrapper around curl(1) that passes -x to use tor(1).
anoncurl() { curl -x socks5://127.0.0.1:9050 "$@"; }

# using torsocks(1) and ftp(1) with no auto-login or user agent, send a
# GET request to $1 and send the results to STDOUT. zathura(1) reads
# from STDIN and displays the document.
#
# $1 is a URL linking to a type of document (PDF, EPUB, etc.) that
# zathura(1) can open.
anonread() { anonftp -o - -- "$1" | zathura -- -; }

# invoke apropos(1) to match $1 against any available macro key of
# manpages that match the current machine architecture.
#
# $1 is a word/phrase to search for (phrases must be quoted).
aprv() { apropos -S "$(uname -m)" -- any="$1"; }

# with a user agent of 'curl', no progress meter, no auto-login, and no
# verbose mode, use ftp(1) to send a GET request to cht.sh with $1 as
# the path and send the results to STDOUT.
#
# $1 is a program one wants to learn more about.
cht() { ftp -U 'curl' -VMo - -- "https://cht.sh/$1"; }

# if $1 ends in '.bak', copy $1 to an identically named file except the
# new file omits '.bak'.
#
# otherwise, copy $1 to an identically named file except the new file
# ends in '.bak'.
#
# $1 is a file.
cpbak() {
  if [ -z "${1##*.bak}" ]; then
    cp -- "$1" "${1%.bak}"
  else
    cp -- "$1" "$1.bak"
  fi
}

# choose files with fzf and edit them.
ebin() { fzf-open "${EDITOR}" "${HOME}/.local/bin"; }
econf() { fzf-open "${EDITOR}" "${HOME}/.config"; }
enotes() { fzf-open "${EDITOR}" "${HOME}/notes"; }

# perform an A record lookup on $1 and return the IP address.
#
# $1 is a domain.
grabipv4() { dig A +short "$1"; }

# perform an AAAA record lookup on $1 and return the IPv6 address.
#
# $1 is a domain.
grabipv6() { dig AAAA +short "$1"; }

# if $1 is less than 1024, print it and exit successfully.
# if $1 is not an integer, exit with an error.
# otherwise, convert $1 to its human readable counterpart.
#
# $1 is a positive integer (supporting rational numbers would require
# some additional code to handle exceptions).
#
# bug: 1024000 returns 0MB. maybe fix it by checking modulus?
hreadable() {
  no_of_loops=0
  size="$1"

  # sanity check so math below works. also alleviates the need to use
  # printf(1) below since we can at least know that ${size} is an
  # integer.
  case "${size}" in
    ''|*[!0-9]*) err 'Only integers are accepted.'               ;;
    *)           # size is an integer, so do nothing and proceed ;;
  esac

  # size < 1024 means the value printed should be in bytes.
  [ "${size}" -lt 1024 ] \
    && echo "${size}B" \
    && return 0

  until [ "${#size}" -le 3 ]; do
    : $((no_of_loops += 1))
    : $((size /= 1024))
  done

  case ${no_of_loops} in
    1) echo "${size}KB"                                    ;;
    2) echo "${size}MB"                                    ;;
    3) echo "${size}GB"                                    ;;
    4) echo "${size}TB"                                    ;;
    *) err 'hreadable() can only convert up to terabytes.' ;;
  esac
}

# with no auto-login, no progress meter and no verbose mode, use ftp(1)
# to send a GET request to ipinfo.io with $1 as the path. Then, send the
# results to STDOUT.
#
# $1 is an IP address. If left blank, ipinf will return results for our
# public IP.
ipinf() { ftp -VMo - -- "https://ipinfo.io/$1"; }

# journal
jrnl() {
  today="$(date '+%F')"
  jrnl_dir="${HOME}/notes/journal"
  jrnl_entry="${jrnl_dir}/${today}.txt"

  # easier to just create the directory than error
  mkdir -p "${jrnl_dir}"

  if ! [ -e "${jrnl_entry}" ]; then
    { echo; echo "${today}"; date '+%H:%M'; } >"${jrnl_entry}"
  else
    { echo; echo '-'; date '+%H:%M'; } >>"${jrnl_entry}"
  fi

  "${EDITOR}" "${jrnl_entry}"
}

# dirty workaround for segfaults/coredumps, for now.
# https://marc.info/?l=openbsd-ports&m=162020290731521&w=2
mpv() {
  # command -v will return the function
  MPV="$(which 'mpv')"
  case "$(hostname -s)" in
    'lain')
      LD_PRELOAD=/usr/X11R6/lib/modules/dri/iris_dri.so "${MPV}" "$@"
      ;;
    'aphrodite')
      LD_PRELOAD=/usr/X11R6/lib/modules/dri/radeonsi_dri.so "${MPV}" "$@"
      ;;
    *)
      "${MPV}" "$@"
      ;;
  esac
}

# if $1 ends in '.bak', remove '.bak' from the filename.
# otherwise, append '.bak' to the filename.
#
# $1 is a file.
mvbak() {
  if [ -z "${1##*.bak}" ]; then
    mv -- "$1" "${1%.bak}"
  else
    mv -- "$1" "$1.bak"
  fi
}

# checks the headers of a website with tor(1).
# nc_head [path] [domain] 80 for HTTP.
# nc_head [path] -c [domain] 443 for HTTPS.
nc_head() {
  path="$1"
  shift
  printf "%s\r\n\r\n" "HEAD ${path} HTTP/1.0" | nc_tor "$@"
}

# nc(1) + tor(1) = fun.
nc_tor() {
  nc -X 5 -x 127.0.0.1:9050 "$@"
}

# obtains the estimated size of a package and returns it in a human
# readable format.
#
# $1 is the name of a valid package.
pkgsize() {
  size="$(pkgq -s -- "$1" | awk -- '/Size/{print $2}')"
  hreadable "${size}"
}

# choose a book with fzf and read it.
readabook() { fzf-open "${READER}" "${HOME}/books"; }

# test Matrix federation and output the JSON.
#
# $1 is a domain name associated with a Matrix homeserver.
testfed() {
  ftp -U '' -VMno - -- \
    "https://federationtester.matrix.org/api/report?server_name=$1"
}

# use bioctl(8) to unlock an encrypted partition and attach it to
# softraid0.
#
# $1 is a chunk device.
unlockhdd() { priv bioctl -c C -l "$1" softraid0; }

# with a user agent of 'curl', no progress meter, no auto-login, and no
# verbose mode, use ftp(1) to send a GET request to wttr.in with $1 as
# the path. Then, send the results to STDOUT.
#
# $1 is a geographical location for weather forecasting purposes. If
# left blank, wttr will return results for the geographical location
# associated with our public IP.
wttr() { ftp -U 'curl' -VMo - -- "https://wttr.in/$1"; }
