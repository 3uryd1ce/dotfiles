#!/usr/bin/env ksh
export MANPAGE_COMPLETIONS='/tmp/completions/manpages'

# shellcheck disable=SC2174
mkdir -p -m 700 "${MANPAGE_COMPLETIONS%/*}"

if ! [ -f "${MANPAGE_COMPLETIONS}" ]; then
	apropos . | generate-completions -t man > "${MANPAGE_COMPLETIONS}"
fi

# Leave command substitution unquoted so it will be interpreted as a list
# (otherwise it will only be one item in a big, long string).
# shellcheck disable=SC2046
set -A complete_man_1 -- $(< "${MANPAGE_COMPLETIONS}")

if command -v rcctl > /dev/null 2>&1; then
	# Is there any way to grab these programmatically instead of manually defining
	# them?
	set -A complete_rcctl_1 -- \
		check \
		configtest \
		disable \
		enable \
		get \
		getdef \
		ls \
		order \
		set \
		start \
		stop \
		reload \
		restart

	# shellcheck disable=SC2046
	set -A complete_rcctl_2 -- $(rcctl ls all)

	set -A complete_rcctl_ls_1 -- \
		all \
		failed \
		off \
		on \
		rogue \
		started \
		stopped
fi

# OpenBSD pkg_*
if command -v pkg_info > /dev/null 2>&1; then
	# shellcheck disable=SC2046
	set -A PKG_LIST -- $(pkg_info -z)

	set -A complete_pkg_delete -- "${PKG_LIST[@]}"
	set -A complete_pkg_info -- "${PKG_LIST[@]}"

	set -A PKG_LIST
fi

if command -v task > /dev/null 2>&1; then
	# shellcheck disable=SC2046
	set -A complete_task -- $( {
		task _commands &
		task _projects &
		{ task _columns | sed 's/$/:/'; } &
		{ task _tags | sed 's/^/+/'; } &
		{ task _tags | sed 's/^/-/'; } &
		task _uuids &
		wait
	} | sort -u )

	# shellcheck disable=SC2046
	set -A complete_task_config -- $(task _config)
fi

if command -v got > /dev/null 2>&1; then
	set -A complete_got_1 -- $(got -h 2>&1 | sed -n s/commands://p)
fi
